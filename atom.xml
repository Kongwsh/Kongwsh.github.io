<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kongwsh</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-15T12:35:12.781Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kong</name>
    <email>echokws@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小白前端入坑随想</title>
    <link href="http://yoursite.com/2016/11/15/summary-0/"/>
    <id>http://yoursite.com/2016/11/15/summary-0/</id>
    <published>2016-11-15T08:23:08.000Z</published>
    <updated>2016-11-15T12:35:12.781Z</updated>
    
    <content type="html"><![CDATA[<p>近日，开始找工作，准备面试，感慨太多，趁机对过去的自己做个总结吧。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=31066853&auto=0&height=66"></iframe>


<a id="more"></a>
<h1 id="面试小记"><a href="#面试小记" class="headerlink" title="面试小记"></a>面试小记</h1><p>简历几乎石沉大海，真是令人沮丧，去几个公司面试，还是培训结构，看来我还是太弱啊。已经毕业，没有技术特长，还是女生注定没优势，回家继续修炼，再择良辰吉日出关吧（无奈.jpg）,用厉害的demo狂甩面试官的脸（滑稽.jpg）。</p>
<h1 id="我为什么选择前端"><a href="#我为什么选择前端" class="headerlink" title="我为什么选择前端"></a>我为什么选择前端</h1><p>  大学时期，网瘾少女，课余时间不是思考一些形而上的问题，就是看电影，逛豆瓣。这样务虚不务实，直到大三才对学业重视，MOOC上刷专业课，奈何出来混迟早是要还的，曾经落下的，早晚都得补回来，进入大四，怀揣着对知识的渴望，加入考研大军，虽败了，但是这段时间是我最快乐的时间，终于摆脱原地踏步，行为瘫痪。</p>
<p>  程序员的世界是美好的，大家有资源会共享，有问题都会积极帮忙，用代码改变世界就算了，但是能改变自己。<br>  是码代码的成就感，还是对于本科计算机但没写过几行代码的我想跻身程序员，前端的门还好进一些，还是就业的压力让我选择前端，我想都有，不然我不会坚持这么久。<br>  既然是我自己要跳进这个坑，就不能轻易地爬出来。</p>
<p>  愚以为生命最好的状态是好奇，热情且独立做自己喜欢的事。我不会告诉你，我追寻的是宇宙生命及一切的终极答案，哈哈哈^_~。<br>  我不知道以后会发生什么，也许会找到更喜欢的事，但此阶段Just do it！跑起来再说。</p>
<h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>前端入门的我学了什么</p>
<ol>
<li>搭建个人博客</li>
<li>掌握HTML5、CSS3、JavaScript开发</li>
<li>能够编写语义化HTML，模块化CSS</li>
<li>响应式布局</li>
<li>jQuery，Ajax</li>
<li>原生js实现常见交互特效，常用组件</li>
<li>Web Audio制作音乐可视化播放web应用</li>
<li>熟练使用谷歌火狐调试工具</li>
<li>基本SEO</li>
<li>git</li>
</ol>
<h1 id="我如何学习"><a href="#我如何学习" class="headerlink" title="我如何学习"></a>我如何学习</h1><p>  自学可以自主把握获取知识的速度和节奏。</p>
<ol>
<li>善用搜索引擎<br>自从用了谷歌，解决问题的效率高了很多，科学上网不解释。<br>除此之外，知乎，segmentfault上的大牛有很多学习资源，感谢大家分享精神。<br><a href="https://link.zhihu.com/?target=http%3A//google.yubolun.com/" target="_blank" rel="external">无障碍访问谷歌</a></li>
<li>获得一手知识<br>对于获得的解决方法或者相关知识要刨根问底，不能总是拿来主义，浅尝辄止，当然时间有限，要分清什么问题要追根溯源，什么问题要一带而过。查文档，看书，拿起高程</li>
<li>不想做全栈的前端不是好前端<br>做一个好前端，我认为，首先要是个好程序员，计算机的知识从最低次机器码到最高层的面向用户的应用程序，都应该了解。MOOC</li>
<li>英语要好，不然怎么看文档。扇贝</li>
<li>快速进步捷径是模仿，不断踩坑，光说不练假把式。DEMO</li>
</ol>
<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><p>今天开始的学习计划</p>
<ol>
<li>组件化，框架React + ES6</li>
<li>构建工具gulp + webpack</li>
<li>后端Node.js 和 python，独立搭建起Web应用的运行环境</li>
<li>模块化，Require.js</li>
<li>CSS预处理器SASS和后处理器autoprefixer</li>
<li>客户端/服务器端缓存，CSS/JS代码优化一类的性能方面知识</li>
<li>js模块开发</li>
<li>算法知识</li>
<li>Http和Https协议</li>
<li>坚持更新博客</li>
</ol>
<p>聪明伶俐，眼疾手快的我没问题，忍不住又夸自己;-)</p>
<p>ps：如果那位前辈不慎看到这篇辣眼睛且没啥质量的文章，有什么要告诫的就留言吧，比方说好玩的项目，书籍等等，谢谢</p>
<p>2016/11/15</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日，开始找工作，准备面试，感慨太多，趁机对过去的自己做个总结吧。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;https://music.163.com/outchain/player?type=2&amp;id=31066853&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="个人随笔" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>CSS之总有办法居中</title>
    <link href="http://yoursite.com/2016/11/15/css-0/"/>
    <id>http://yoursite.com/2016/11/15/css-0/</id>
    <published>2016-11-14T17:23:08.000Z</published>
    <updated>2016-11-14T16:36:18.162Z</updated>
    
    <content type="html"><![CDATA[<p>居中是布局的关键，分为水平居中，垂直居中，水平垂直居中。下面总结几种居中的办法，以及讨论其兼容性。<em>忍不住夸自己:-)</em><br>默认的HTML代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h1><h2 id="1-text-align-center"><a href="#1-text-align-center" class="headerlink" title="1.text-align:center"></a>1.<code>text-align:center</code></h2><p>条件：行内元素(如文本，链接)<br>在其父元素（必须是块级元素）设置如下css样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">     <span class="attribute">text-align</span>:center;</div><div class="line">     <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">     <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种方法对display设置为<code>inline</code>、<code>inline-block</code>、<code>inline-table</code>、<code>inline-flex</code>的元素都有效。</p>
<blockquote>
<p>优点：兼容性非常好，只需要添加只需要在子元素的css中添加<em>display:inline和</em>zoom:1就可兼容到IE6、7；缺点：内部文字也会水平居中，需消除影响。</p>
</blockquote>
<h2 id="2-margin-0-auto"><a href="#2-margin-0-auto" class="headerlink" title="2.margin: 0 auto"></a>2.<code>margin: 0 auto</code></h2><p>条件：已知width,子元素必须为块级元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>浏览器就会根据元素的宽度自动为元素左右两边设定等宽的margin，来达到水平居中的效果。只适用于水平居中</p>
<blockquote>
<p>缺点：对浮动元素或绝对定位元素无效。</p>
</blockquote>
<h2 id="3-table-cell"><a href="#3-table-cell" class="headerlink" title="3.table-cell"></a>3.<code>table-cell</code></h2><p>条件：子元素宽度不知<br>父元素设置<code>display：table-cell</code>(指定对象作为表格单元格,类同于html标签<code>&lt;td&gt;</code>)<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.parent &#123;·</div><div class="line">    display:table-cell;</div><div class="line">    width: 200px;</div><div class="line">    height: 200px;</div><div class="line">&#125;</div><div class="line">.child &#123;</div><div class="line">    text-align: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时text-aligh属性对行内元素和块状元素都有效。</p>
<h2 id="4-abasolute-transform"><a href="#4-abasolute-transform" class="headerlink" title="4.abasolute + transform"></a>4.<code>abasolute</code> + <code>transform</code></h2><p>条件：子元素宽度不知<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>优点：居中元素不对其他元素产生影响。缺点：CSS3新属性支持IE9+，低版本浏览器不支持。</p>
</blockquote>
<h2 id="5-abasolute-margin-left负值"><a href="#5-abasolute-margin-left负值" class="headerlink" title="5.abasolute + margin-left负值"></a>5.<code>abasolute</code> + <code>margin-left负值</code></h2><p>条件：子元素已知宽度<br>绝对定位进行居中的原理是通过把这个绝对定位元素的left的属性设为50%,这个时候元素并不是居中的，而是比居中的位置向右偏了这个元素宽度的一半的距离，所以需要使用一个负的margin-left的值来把它拉回到居中的位置，这个负的margin值就取元素宽度的一半。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">50px</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>只支持IE9+,谷歌，火狐等符合w3c标准的现代浏览器。</p>
</blockquote>
<h2 id="6-abasolute-margin：0-auto"><a href="#6-abasolute-margin：0-auto" class="headerlink" title="6.abasolute + margin：0 auto"></a>6.<code>abasolute</code> + <code>margin：0 auto</code></h2><p>条件：子元素高度已知<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>兼容IE6，7</p>
</blockquote>
<h2 id="7-relative-float"><a href="#7-relative-float" class="headerlink" title="7.relative + float"></a>7.<code>relative</code> + <code>float</code></h2><p>条件：子元素宽度不知。<br>浮动居中的原理是：把浮动元素相对定位到父元素宽度50%的地方，但这个时候元素还不是居中的，而是比居中的那个位置多出了自身一半的宽度，这时就需要他里面的子元素再用一个相对定位，把那多出的自身一半的宽度拉回来，而因为相对定位正是相对于普通流来定位的，所以自身一半的宽度只要把left 或 right设为50%就可以得到了，因而不用知道自身的实际宽度是多少。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>优点是不用知道要居中的元素的宽度，即使这个宽度是不断变化的也行；缺点是需要一个多余的元素来包裹要居中的元素。</p>
</blockquote>
<h2 id="8-flex"><a href="#8-flex" class="headerlink" title="8.flex"></a>8.<code>flex</code></h2><p>条件：子元素宽度不知<br>弹性布局这个最好了，如果不考虑兼容性的话。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h1><p>垂直居中稍微复杂一点</p>
<h2 id="1-padding"><a href="#1-padding" class="headerlink" title="1.padding"></a>1.<code>padding</code></h2><p>条件：针对单行元素<br>对于行内元素，当父元素没有设定宽度，而是根据内容自适应时，设置padding就可以达到垂直居中的效果,相同的上下内距实现垂直居中:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-line-height-height"><a href="#2-line-height-height" class="headerlink" title="2.line-height + height"></a>2.<code>line-height</code> + <code>height</code></h2><p>条件：针对单行元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;   <span class="comment">/*行高与line-height相同*/</span></div><div class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-vertical-align-table-cell"><a href="#3-vertical-align-table-cell" class="headerlink" title="3. vertical-align + table-cell"></a>3. <code>vertical-align</code> + <code>table-cell</code></h2><p>条件：子元素高度已知<br>vertical-align：设置或检索内联元素在行框内的垂直对其方式。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">vertical-align</span>:middle;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>优点：设置简单，只需对父元素进行设置，兼容到IE8+，需兼容地版本浏览器时，可更换div为表格结构。</p>
</blockquote>
<h2 id="4-absolute-margin-top"><a href="#4-absolute-margin-top" class="headerlink" title="4.absolute + margin-top"></a>4.<code>absolute</code> + <code>margin-top</code></h2><p>条件：子元素高度已知<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</div><div class="line">  <span class="comment">/* account for padding and border if not using box-sizing: border-box; 这里可以使用transform：translate(-50%)实现同样的效果*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5-absolute-transform"><a href="#5-absolute-transform" class="headerlink" title="5. absolute + transform"></a>5. <code>absolute</code> + <code>transform</code></h2><p>条件：子元素高度不知<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="6-flex"><a href="#6-flex" class="headerlink" title="6.flex"></a>6.<code>flex</code></h2><p>条件：宽高不定<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h1><h2 id="1-inline-block-text-align-和-table-cell-vertical-align"><a href="#1-inline-block-text-align-和-table-cell-vertical-align" class="headerlink" title="1.inline-block + text-align 和 table-cell + vertical-align"></a>1.<code>inline-block</code> + <code>text-align</code> 和 <code>table-cell</code> + <code>vertical-align</code></h2><p>条件：宽高不定<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">vertical-align</span>:middle;</div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>优点：兼容性好,支持IE8+，低版本浏览器也好兼容。缺点：设置较为复杂。</p>
</blockquote>
<h2 id="2-absolute-transform"><a href="#2-absolute-transform" class="headerlink" title="2 absolute + transform"></a>2 <code>absolute</code> + <code>transform</code></h2><p>条件：宽高不定<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>优点：居中元素不对其他元素产生影响。缺点：CSS3新属性支持IE9+，低版本浏览器不支持。</p>
</blockquote>
<h2 id="3-flex"><a href="#3-flex" class="headerlink" title="3. flex"></a>3. <code>flex</code></h2><p>条件：宽高不定<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="4-absolute-margin"><a href="#4-absolute-margin" class="headerlink" title="4.absolute + margin"></a>4.<code>absolute</code> + <code>margin</code></h2><p>条件：宽高已知<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">margin</span>:auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5-absolute-margin-top负值-margin-left负值"><a href="#5-absolute-margin-top负值-margin-left负值" class="headerlink" title="5. absolute + margin-top负值 +margin-left负值"></a>5. <code>absolute</code> + <code>margin-top负值</code> +<code>margin-left负值</code></h2><p>条件：宽高已知</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.parent &#123;</div><div class="line">    position；relative；</div><div class="line">    width: 200px;</div><div class="line">    height:200px;</div><div class="line">&#125;</div><div class="line">.child &#123;</div><div class="line">    position: absolute;</div><div class="line">    width: 100px;</div><div class="line">    height:100px;</div><div class="line">    left: 50%;</div><div class="line">    top: 50%;</div><div class="line">    margin-left: -50px;</div><div class="line">    margin-top: -50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;居中是布局的关键，分为水平居中，垂直居中，水平垂直居中。下面总结几种居中的办法，以及讨论其兼容性。&lt;em&gt;忍不住夸自己:-)&lt;/em&gt;&lt;br&gt;默认的HTML代码:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;demo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>理解AJAX</title>
    <link href="http://yoursite.com/2016/10/01/AJAX/"/>
    <id>http://yoursite.com/2016/10/01/AJAX/</id>
    <published>2016-10-01T07:36:08.000Z</published>
    <updated>2016-10-17T04:52:32.148Z</updated>
    
    <content type="html"><![CDATA[<p>2005年Jesse James Garrett 发明的一项技术，Ajax（Asynchronous JavaScript and XML），即用JavaScript执行异步网络请求。</p>
<a id="more"></a>
<p>通常情况下，一次http请求对应一个页面。</p>
<p>如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。</p>
<p>Ajax的核心是XMLHttpRequest对象（XHR），可以由XHR对象取得新数据，然后在通过DOM将新数据插入到页面中。</p>
<h1 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h1><p>创建XHR<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">    request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    request = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当创建了XMLHttpRequest对象后，要先设置onreadystatechange的回调函数。在回调函数中，通常我们只需通过readyState === 4判断请求是否完成，如果已完成，再根据status === 200判断是否是一个成功的响应。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 状态发生变化时，函数被回调</span></div><div class="line">    <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123; <span class="comment">// 成功完成</span></div><div class="line">        <span class="comment">// 判断响应结果:</span></div><div class="line">        <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</div><div class="line">            <span class="comment">// 成功，通过responseText拿到响应的文本:</span></div><div class="line">            <span class="keyword">return</span> success(request.responseText);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 失败，根据响应码判断失败原因:</span></div><div class="line">            <span class="keyword">return</span> fail(request.status);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// HTTP请求还在继续...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 发送请求:</span></div><div class="line">request.open(<span class="string">'GET'</span>, <span class="string">'/api/categories'</span>);</div><div class="line">request.send();</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>open(method,url,async)</td>
<td>规定请求类型，以及url是否异步</td>
</tr>
<tr>
<td>send(string)</td>
<td>将请求发送到服务器上，string仅用于POST请求</td>
</tr>
<tr>
<td>setRequestHeader()</td>
<td>设置http头信息，放在open()与send()中间</td>
</tr>
<tr>
<td>getAllRequestHeader()</td>
<td>获取所有响应报头</td>
</tr>
<tr>
<td>getRequestHeader()</td>
<td>查询响应中的某个字段的值</td>
</tr>
</tbody>
</table>
<p>调用send()方法，请求被发往服务器，服务器根据请求生成响应（Response），传回给XHR对象，在收到响应后相应数据会填充到XHR对象的属性，有四个相关属性会被填充：</p>
<ol>
<li><p>responseText：作为响应主体被返回的文本</p>
</li>
<li><p>responseXML：如果响应内容的类型是”text/xml”或”application/xml”，这个属性将保存包含着相应数据的XML文档</p>
</li>
<li><p>status：响应的HTTP状态（200,404,500等）</p>
</li>
<li><p>statusText：HTTP状态说明</p>
</li>
</ol>
<p>XHR对象有一个readyState属性，该属性表示请求/响应过程中的当前活动阶段，每当readyState值改变的时候都会触发一次onreadystatechange事件。</p>
<h1 id="手动封装"><a href="#手动封装" class="headerlink" title="手动封装"></a>手动封装</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建xhr</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">__createXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// Firefox, Opera 8.0+, Safari，IE7+</span></div><div class="line">                    xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (e) &#123;</div><div class="line">                    <span class="comment">// Internet Explorer</span></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">catch</span> (e) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">catch</span> (e) &#123;</div><div class="line">                            xhr = <span class="literal">null</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> xhr;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">ajax: <span class="function"><span class="keyword">function</span>(<span class="params">configs</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> settings = &#123;</div><div class="line">                        <span class="string">"url"</span>: <span class="string">""</span>,  <span class="comment">//请求地址</span></div><div class="line">                        <span class="string">"method"</span>: <span class="string">"post"</span>, <span class="comment">//请求使用方法</span></div><div class="line">                        <span class="string">"user"</span>: <span class="string">""</span>, <span class="comment">//用户名</span></div><div class="line">                        <span class="string">"password"</span>: <span class="string">""</span>, <span class="comment">//密码</span></div><div class="line">                        <span class="string">"data"</span>: <span class="literal">null</span>, <span class="comment">//参数(text/json)</span></div><div class="line">                        <span class="string">"responseType"</span>: <span class="string">"text"</span>, <span class="comment">//返回值获取方式 text/xml</span></div><div class="line">                        <span class="string">"headers"</span>: &#123;&#125;, <span class="comment">//自定义的HttpHeader</span></div><div class="line">                        <span class="string">"enableCache"</span>:<span class="literal">true</span>, <span class="comment">//是否使用缓存</span></div><div class="line">                        <span class="string">"onSucceed"</span>: <span class="literal">null</span>, <span class="comment">//成功句柄</span></div><div class="line">                        <span class="string">"onClientError"</span>: <span class="literal">null</span>, <span class="comment">//客户端错误句柄</span></div><div class="line">                        <span class="string">"onServerError"</span>: <span class="literal">null</span> <span class="comment">//服务器端错误句柄</span></div><div class="line">                    &#125;;</div><div class="line">                    <span class="keyword">for</span> (s <span class="keyword">in</span> settings) &#123;</div><div class="line">                        settings[s] = configs[s] ? configs[s] : settings[s];  <span class="comment">//应用自定义配置</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">var</span> xhr = _createXHR();  <span class="comment">//创建XHR对象</span></div><div class="line">                    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;  <span class="comment">//请求完成，响应就绪</span></div><div class="line">                            <span class="keyword">var</span> result = settings[<span class="string">"responseType"</span>] == <span class="string">"text"</span> ? xhr.responseText : xhr.responseXML; <span class="comment">//返回值类型</span></div><div class="line">                            <span class="keyword">if</span> (((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &amp;&amp; <span class="keyword">typeof</span> settings[<span class="string">'onSucceed'</span>] == <span class="string">'function'</span>) &#123; <span class="comment">//成功</span></div><div class="line">                                settings[<span class="string">'onSucceed'</span>](result, xhr.status);</div><div class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.status &gt;= <span class="number">400</span> &amp;&amp; xhr.status &lt; <span class="number">500</span>) &#123; <span class="comment">//客户端出错，404啊神马的</span></div><div class="line">                                settings[<span class="string">'onClientError'</span>](result, xhr.status);</div><div class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.status &gt;= <span class="number">500</span>) &#123; <span class="comment">//服务器端出错</span></div><div class="line">                                settings[<span class="string">'onServerError'</span>](result, xhr.status);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    xhr.open(settings[<span class="string">'method'</span>], settings[<span class="string">'url'</span>], settings[<span class="string">'user'</span>], settings[<span class="string">'password'</span>]); <span class="comment">//发送请求</span></div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> settings[<span class="string">'headers'</span>] == <span class="string">'object'</span>) &#123; <span class="comment">//设置自定义headers</span></div><div class="line">                        <span class="keyword">var</span> headers = settings[<span class="string">'headers'</span>];</div><div class="line">                        <span class="keyword">for</span> (h <span class="keyword">in</span> headers) &#123;</div><div class="line">                            xhr.setRequestHeader(h, headers[h]);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(!settings[<span class="string">'enableCache'</span>])&#123; <span class="comment">//禁用缓存</span></div><div class="line">                        xhr.setRequestHeader(<span class="string">"If-Modified-Since"</span>,<span class="string">"0"</span>);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (settings[<span class="string">"method"</span>].toLowerCase() == <span class="string">"post"</span>) &#123; <span class="comment">//post请求</span></div><div class="line">                        xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>);</div><div class="line">                        <span class="keyword">var</span> data=<span class="string">""</span>;</div><div class="line">                        <span class="keyword">if</span>(<span class="keyword">typeof</span> settings[<span class="string">"data"</span>]==<span class="string">'object'</span>)</div><div class="line">                        &#123;</div><div class="line">                            <span class="keyword">for</span>(d <span class="keyword">in</span> settings[<span class="string">"data"</span>])&#123;</div><div class="line">                                data+=(d+<span class="string">'='</span>+settings[<span class="string">"data"</span>][d]);</div><div class="line">                                &#125;</div><div class="line">                          &#125;<span class="keyword">else</span>&#123;</div><div class="line">                            data=settings[<span class="string">"data"</span>];</div><div class="line">                              &#125;</div><div class="line">                        xhr.send(data); <span class="comment">//传递参数</span></div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        xhr.send(); <span class="comment">//get请求</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">ssLib.ajax(&#123;</div><div class="line">            <span class="string">"url"</span>: <span class="string">"testajax.php"</span>,</div><div class="line">            <span class="string">"data"</span>:&#123;<span class="string">"name"</span>:<span class="string">"Byron"</span>&#125;,</div><div class="line">            <span class="string">"onSucceed"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">                alert(result);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h1 id="jQuery封装"><a href="#jQuery封装" class="headerlink" title="jQuery封装"></a>jQuery封装</h1><p>jQuery封装的ajax<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//保存数据到服务器，成功时显示信息</span></div><div class="line">$.ajax(&#123;</div><div class="line">  type: <span class="string">"POST"</span>,</div><div class="line">  url: <span class="string">"some.php"</span>,</div><div class="line">  data: &#123; name: <span class="string">"John"</span>, location: <span class="string">"Boston"</span> &#125;</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> msg </span>) </span>&#123;</div><div class="line">  alert( <span class="string">"Data Saved: "</span> + msg );</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li>type：类型，”POST”或”GET”,默认为”GET”</li>
<li>url:发送请求的地址</li>
<li>data:一个对象，连同请求发送到服务器的数据</li>
<li>dataType：预期服务器返回的数据类型，如果不指定，jQuery将自动根据HTTP包MIME信息来只能判断，一般我们采用json格式，可设置”json”</li>
<li>success:请求成功后的回调函数，传入返回后的数据，以及包含成功代码的字符串</li>
<li>error：请求失败时的回调此函数，传入XHR对象</li>
</ul>
<h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>Ajax的核心是通过XmlHttpRequest获取非本页内容，而JSONP的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本,利用了浏览器允许跨域引用JavaScript资源。</p>
<p>出于安全考虑，浏览器都有同源策略。即相同domain的页面运行在一个沙箱（sandbox）中，与其他domain的沙箱隔离，不能跨越domain直接访问其他domain下的资源。但HTML中有几个标签可以忽略同源限制去请求其他domain下的资源，比如<code>&lt;img&gt;</code> 和<code>&lt;script&gt;</code>等。这里主要说<code>&lt;script src=&quot;url&quot;&gt;</code>,当浏览器解析到<code>&lt;script&gt;</code>标签，就会发起一个get请求，请求的URL即为scr所指定的url。这就相当于跨域访问了一个资源。</p>
<p>比如运行一下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">script.type = <span class="string">'text/javascript'</span>;</div><div class="line">script.src = <span class="string">'http://www.someWebApiServer.com/some-data'</span>;</div></pre></td></tr></table></figure></p>
<p>可能得到的是一个script元素，元素的innerHTML是请求返回的对象：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    &#123;[<span class="string">'some string 1'</span>, <span class="string">'some data'</span>, <span class="string">'whatever data'</span>]&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们已经得到了想要的内容，但解析它并不方便。如果使用了JSONP是什么样的呢：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">script.type = <span class="string">'text/javascript'</span>;</div><div class="line">script.src = <span class="string">'http://www.someWebApiServer.com/some-data?callback=my_callback'</span>;</div></pre></td></tr></table></figure></p>
<p>返回的结果是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_callback(&#123;[<span class="string">'some string 1'</span>, <span class="string">'some data'</span>, <span class="string">'whatever data'</span>]&#125;);</div></pre></td></tr></table></figure></p>
<p>可以看到，这里的返回结果是直接执行了一个函数my_callback(…),实参就是我们需要的数据<br>那么只要在客户端页面里实现my_callback 函数，就可以做任何想做的事了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    ...</div><div class="line">    &lt;script&gt;</div><div class="line">        function my_callback(data)&#123;alert(data.name etc.)&#125;</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>在客户端页面定义函数，在远程服务器端传入数据调用该函数。</p>
<p>在JQuery.ajax中应用，在前端页面的ajax方法中设置dataType:”jsonp”，并增加jsonp:”callback”,（jsonp的值可为任意值），然后在服务器端的方法中$jsonp = $_GET[“callback”];注意此处的callback需要和jsonp的值保持一致，然后再将$jsonp和返回结果连接起来。<br>jQuery实现jsonp调用，，jquery在处理jsonp类型的ajax时，自动生成回调函数并把数据取出来供success属性方法来调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">type:<span class="string">"GET"</span>,</div><div class="line">url:<span class="string">"http://127.0.0.1:8080/ajaxdemo/service.php?number"</span>+$(<span class="string">"#keyword"</span>).val(),</div><div class="line">dataType:<span class="string">"jsonp"</span>, <span class="comment">//由"json"改为"jsonp"</span></div><div class="line">jsonp:<span class="string">"callback"</span>,</div><div class="line"> <span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></div><div class="line">jsonpCallback:<span class="string">"callback11"</span>,</div><div class="line"><span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</span></div><div class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span>(data.success)&#123;</div><div class="line">$(<span class="string">"#searchResult"</span>).html(data.msg);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">$(<span class="string">"#searchResult"</span>).html(<span class="string">"出现错误"</span>);</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params">er</span>)</span>&#123;</div><div class="line">alert(er.status);</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在远程服务器端页面：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$jsonp = $_GET[<span class="string">"callback"</span>];</div><div class="line">$result = $jsonp . <span class="string">'(&#123;"success":false,"msg":"没有找到员工。"&#125;)'</span>;</div><div class="line"><span class="comment">//在PHP中连接字符串使用“.”</span></div></pre></td></tr></table></figure></p>
<p>跨域处理之JSONP，看到这篇文章，受益匪浅：<a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="external">【原创】说说JSON和JSONP，也许你会豁然开朗，含jQuery用例</a></p>
<h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p>CORS全称Cross-Origin Resource Sharing，是HTML5规范定义的如何跨域访问资源。<br>Origin表示本域，也就是浏览器当前页面的域。当JavaScript向外域（如sina.com）发起请求后，浏览器收到响应后，首先检查Access-Control-Allow-Origin是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript将无法获取到响应的任何数据。<br>XHR2：HTML5提供的XMLHttpRequest Level2已经实现了跨域访问以及其他的一些新功能<br>IE10以下版本浏览器不支持，在XHR2中对CORS有了很好的支持。<br>用法：<br>在服务器端&lt;?php?&gt;中增加设置即可：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、header(<span class="string">'Access-Control-Allow-Origin:*'</span>);</div><div class="line"><span class="comment">//“*”表示支持所有域名，也可以设置特定的域名</span></div><div class="line"><span class="number">2</span>、header(<span class="string">'Access-Control-Allow-Methods:Post/Get'</span>);</div><div class="line">表示请求是post还是get</div></pre></td></tr></table></figure></p>
<p>跨域处理之CORS:<a href="https://www.w3.org/TR/cors/" target="_blank" rel="external">W3C Cross-Origin Resource Sharing</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2005年Jesse James Garrett 发明的一项技术，Ajax（Asynchronous JavaScript and XML），即用JavaScript执行异步网络请求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>原生JavaScript实现轮播图</title>
    <link href="http://yoursite.com/2016/09/28/carousel/"/>
    <id>http://yoursite.com/2016/09/28/carousel/</id>
    <published>2016-09-28T09:35:08.000Z</published>
    <updated>2016-10-30T09:16:47.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="轮播图TODO"><a href="#轮播图TODO" class="headerlink" title="轮播图TODO"></a>轮播图TODO</h1><ol>
<li>点击左右箭头，切换图片</li>
<li>点击小圆点，可跳跃切换图片</li>
<li>可以无限滚动</li>
<li>图片切换时有滑动的动画效果</li>
<li>自动播放<br>github：<a href="https://github.com/Kongwsh/iComponents/tree/master/carousel" target="_blank" rel="external">carousel</a><br>效果图：<a href="https://kongwsh.github.io/iComponents/carousel/js-carousel.html" target="_blank" rel="external">carousel</a></li>
</ol>
<a id="more"></a>
<h1 id="HTML文档"><a href="#HTML文档" class="headerlink" title="HTML文档"></a>HTML文档</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>carousel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">style</span>=<span class="string">"left: -600px;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/5.png"</span> <span class="attr">alt</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.png"</span> <span class="attr">alt</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/2.png"</span> <span class="attr">alt</span>=<span class="string">"2"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/3.png"</span> <span class="attr">alt</span>=<span class="string">"3"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/4.png"</span> <span class="attr">alt</span>=<span class="string">"4"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/5.png"</span> <span class="attr">alt</span>=<span class="string">"5"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.png"</span> <span class="attr">alt</span>=<span class="string">"5"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"buttons"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">class</span>=<span class="string">"on"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">index</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">id</span>=<span class="string">"prev"</span> <span class="attr">class</span>=<span class="string">"arrow"</span>&gt;</span>&amp;lt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">id</span>=<span class="string">"next"</span> <span class="attr">class</span>=<span class="string">"arrow"</span>&gt;</span>&amp;gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="样式布局"><a href="#样式布局" class="headerlink" title="样式布局"></a>样式布局</h1><ol>
<li>left值置为负值，<code>&lt;div id=&quot;list&quot;&gt;&lt;/div&gt;</code>左边缘相对于<code>&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</code>左边缘向左-600px。<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">style</span>=<span class="string">"left: -600px;"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<img src="/images/carousel.png" title="轮播示意图">
<p>2.箭头和小圆点的z-index值为2，id为list的盒子z-index值为1。</p>
<h1 id="箭头切换"><a href="#箭头切换" class="headerlink" title="箭头切换"></a>箭头切换</h1><p>点击右箭头事件，向左移动，首先判断动画是否正在进行，如正在进行，点击无效，否则调用animate()函数（封装了滑动动画效果），传入参数-600，小圆点跟随箭头移动。</p>
<h1 id="无限滚动"><a href="#无限滚动" class="headerlink" title="无限滚动"></a>无限滚动</h1><p>无限滚动借助两张辅助图片，使之不会出现空白，示意图如上.当前图片如果为第五张，点击右箭头(&lt;)，图片会切换到辅助图片第一张上，同时置盒子的left值为-600px，再次点击右箭头(&lt;),图片会切换到第二张。左箭头同理。</p>
<h1 id="小圆点切换"><a href="#小圆点切换" class="headerlink" title="小圆点切换"></a>小圆点切换</h1><p>用for循环给每一个小圆点添加点击事件，通过判断当前小圆点的classname是否为on，如果为’on’,则点击的是当前小圆点，不执行后面的代码；获取属性的index的属性值，计算偏移量，调用animate()切换图片,传入偏移量为参数；更新更新小圆点index值，点亮当前小圆点，置灰其余小圆点。</p>
<h1 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h1><p>为了实现滑动的动画效果，left不是立即变为目标值，而通过定时器进行好几次位移，每次位移前，判断是否达到目标值，符合位移条件，进行位移，调用定时器，直到达到目标值，不符合位移条件，把当前left值置为目标值，如当前在辅助图上，就归位到真的图上。</p>
<h1 id="自动播放"><a href="#自动播放" class="headerlink" title="自动播放"></a>自动播放</h1><p>鼠标移入停止自动播放，鼠标移出开始自动播放.<br>JavaScript代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//获取元素，父容器，列表，小圆点，两个箭头</span></div><div class="line">            <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</div><div class="line">            <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</div><div class="line">            <span class="keyword">var</span> buttons = <span class="built_in">document</span>.getElementById(<span class="string">'buttons'</span>).getElementsByTagName(<span class="string">'span'</span>);</div><div class="line">            <span class="keyword">var</span> prev = <span class="built_in">document</span>.getElementById(<span class="string">'prev'</span>);</div><div class="line">            <span class="keyword">var</span> next = <span class="built_in">document</span>.getElementById(<span class="string">'next'</span>);</div><div class="line">            <span class="keyword">var</span> index = <span class="number">1</span>;<span class="comment">//小圆点序号</span></div><div class="line">            <span class="keyword">var</span> len = <span class="number">5</span>;<span class="comment">//图片个数</span></div><div class="line">            <span class="keyword">var</span> animated = <span class="literal">false</span>;<span class="comment">//存放动画运行状态，优化功能(正在动画，点击无效)</span></div><div class="line">            <span class="keyword">var</span> interval = <span class="number">3000</span>;<span class="comment">//自动播放时间间隔</span></div><div class="line">            <span class="keyword">var</span> timer;</div><div class="line"></div><div class="line">            <span class="comment">//滑动动画效果</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">animate</span> (<span class="params">offset</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (offset == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                animated = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">var</span> time = <span class="number">300</span>;<span class="comment">//位移总的时间</span></div><div class="line">                <span class="keyword">var</span> inteval = <span class="number">10</span>;<span class="comment">//位移间隔事件</span></div><div class="line">                <span class="keyword">var</span> speed = offset/(time/inteval);<span class="comment">//每次位移量=总偏移量/次数</span></div><div class="line">                <span class="keyword">var</span> left = <span class="built_in">parseInt</span>(list.style.left) + offset;<span class="comment">//left属性的目标值</span></div><div class="line">                <span class="comment">//go()功能是判断是否位移和实现位移</span></div><div class="line">                <span class="keyword">var</span> go = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="comment">//符合位移条件，进行位移</span></div><div class="line">                    <span class="keyword">if</span> ( (speed &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">parseInt</span>(list.style.left) &lt; left) || (speed &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">parseInt</span>(list.style.left) &gt; left)) &#123;</div><div class="line">                        list.style.left = <span class="built_in">parseInt</span>(list.style.left) + speed + <span class="string">'px'</span>;</div><div class="line">                        setTimeout(go, inteval);<span class="comment">//继续位移，递归</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">//不符合位移条件，把当前left值置为目标值</span></div><div class="line">                        list.style.left = left + <span class="string">'px'</span>;</div><div class="line">                        <span class="comment">//如当前在辅助图上，就归位到真的图上</span></div><div class="line">                        <span class="keyword">if</span>(left&gt;<span class="number">-200</span>)&#123;</div><div class="line">                            list.style.left = <span class="number">-600</span> * len + <span class="string">'px'</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span>(left&lt;(<span class="number">-600</span> * len)) &#123;</div><div class="line">                            list.style.left = <span class="string">'-600px'</span>;</div><div class="line">                        &#125;</div><div class="line">                        animated = <span class="literal">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                go();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//切换时点亮小圆点</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">showButton</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">//遍历所有小圆点，置灰已前点亮的小圆点</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buttons.length ; i++) &#123;</div><div class="line">                    <span class="keyword">if</span>( buttons[i].className == <span class="string">'on'</span>)&#123;</div><div class="line">                        buttons[i].className = <span class="string">''</span>;</div><div class="line">                        <span class="keyword">break</span>;<span class="comment">//跳出循环</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//点亮当前小圆点</span></div><div class="line">                buttons[index - <span class="number">1</span>].className = <span class="string">'on'</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//开始自动播放</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    next.onclick();</div><div class="line">                    play();</div><div class="line">                &#125;, interval);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//停止自动播放</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                clearTimeout(timer);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//点击右箭头事件，向左移动</span></div><div class="line">            next.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (animated) &#123;</div><div class="line">                    <span class="keyword">return</span>;<span class="comment">//正在切换，点击无效</span></div><div class="line">                &#125;</div><div class="line">                <span class="comment">//小圆点index归位</span></div><div class="line">                <span class="keyword">if</span> (index == <span class="number">5</span>) &#123;</div><div class="line">                    index = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    index += <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//小圆点跟随箭头移动</span></div><div class="line">                showButton();</div><div class="line">                <span class="keyword">if</span> (!animated)&#123;</div><div class="line">                    animate(<span class="number">-600</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//点击左箭头事件，向右移动</span></div><div class="line">            prev.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (animated) &#123;</div><div class="line">                    <span class="keyword">return</span>;<span class="comment">//正在切换，点击无效</span></div><div class="line">                &#125;</div><div class="line">                <span class="comment">//小圆点index归位</span></div><div class="line">                <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</div><div class="line">                    index = <span class="number">5</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    index -= <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//小圆点跟随箭头移动</span></div><div class="line">                showButton();</div><div class="line">                <span class="keyword">if</span> (!animated)&#123;</div><div class="line">                    animate(<span class="number">-600</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//给每一个小圆点添加点击事件</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buttons.length; i++) &#123;</div><div class="line">                buttons[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (animated) &#123;</div><div class="line">                        <span class="keyword">return</span>;<span class="comment">//正在切换，点击无效</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.className == <span class="string">'on'</span>) &#123;</div><div class="line">                        <span class="keyword">return</span>;<span class="comment">//点击当前小圆点，不执行后面的代码</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//小圆点跳跃切换</span></div><div class="line">                   <span class="comment">//获取不是自带属性的index的属性值</span></div><div class="line">                    <span class="keyword">var</span> myIndex = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.getAttribute(<span class="string">'index'</span>));</div><div class="line">                   <span class="comment">//求偏移量</span></div><div class="line">                    <span class="keyword">var</span> offset = <span class="number">-600</span> * (myIndex - index);</div><div class="line">                    <span class="keyword">if</span> (!animated) &#123;</div><div class="line">                        animate(offset);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//更新小圆点index值</span></div><div class="line">                    index = myIndex;</div><div class="line">                    <span class="comment">//点亮小圆点</span></div><div class="line">                    showButton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//鼠标移入停止自动播放，鼠标移出开始自动播放</span></div><div class="line">            container.onmouseover = stop;</div><div class="line">            container.onmouseout = play;</div><div class="line"></div><div class="line">            play();</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>jQuery代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$next.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index == <span class="number">5</span>) &#123;</div><div class="line">            index = <span class="number">1</span>;</div><div class="line">            $list.attr(<span class="string">'left'</span>, <span class="string">'-600px'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            index += <span class="number">1</span>;</div><div class="line">            $list.animate(&#123; <span class="string">"left"</span>: <span class="string">"-=600px"</span> &#125;, <span class="string">"normal"</span>);</div><div class="line">        &#125;</div><div class="line">        showButton();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;轮播图TODO&quot;&gt;&lt;a href=&quot;#轮播图TODO&quot; class=&quot;headerlink&quot; title=&quot;轮播图TODO&quot;&gt;&lt;/a&gt;轮播图TODO&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;点击左右箭头，切换图片&lt;/li&gt;
&lt;li&gt;点击小圆点，可跳跃切换图片&lt;/li&gt;
&lt;li&gt;可以无限滚动&lt;/li&gt;
&lt;li&gt;图片切换时有滑动的动画效果&lt;/li&gt;
&lt;li&gt;自动播放&lt;br&gt;github：&lt;a href=&quot;https://github.com/Kongwsh/iComponents/tree/master/carousel&quot;&gt;carousel&lt;/a&gt;&lt;br&gt;效果图：&lt;a href=&quot;https://kongwsh.github.io/iComponents/carousel/js-carousel.html&quot;&gt;carousel&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>瀑布流布局</title>
    <link href="http://yoursite.com/2016/09/25/waterfall/"/>
    <id>http://yoursite.com/2016/09/25/waterfall/</id>
    <published>2016-09-25T07:36:08.000Z</published>
    <updated>2016-10-28T05:48:12.789Z</updated>
    
    <content type="html"><![CDATA[<p>瀑布流布局视觉表现：</p>
<ol>
<li>参差不齐的多栏布局，图片等宽不等高，下一行的第一张图片加载上一行图片高度最小的下面。</li>
<li>图片持续加载到当前尾部。</li>
</ol>
<p><a href="https://kongwsh.github.io/iComponents/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/mywaterfall.html" target="_blank" rel="external">瀑布流布局demo</a><br>效果实现方法：</p>
<ol>
<li>原生javascript <a href="https://github.com/Kongwsh/iComponents/blob/master/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/js/script.js" target="_blank" rel="external">源代码</a></li>
<li>jQuery <a href="https://github.com/Kongwsh/iComponents/blob/master/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/js/script1.js" target="_blank" rel="external">源代码</a></li>
<li>css3 columns 多栏布局 <a href="https://github.com/Kongwsh/iComponents/blob/master/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/css/style1.css" target="_blank" rel="external">源代码</a></li>
</ol>
<a id="more"></a>
<h1 id="HTML文档"><a href="#HTML文档" class="headerlink" title="HTML文档"></a>HTML文档</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>瀑布流布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;link type="text/css" rel="stylesheet" href="css/style.css"/&gt;</span></div><div class="line">    &lt;script src="http://libs.baidu.com/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script type="text/javascript" src="js/script1.js"&gt;&lt;/script&gt; --&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pic"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/P_00.jpg"</span> <span class="attr">alt</span>=<span class="string">"hello"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pic"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/P_01.jpg"</span> <span class="attr">alt</span>=<span class="string">"hello"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="原生JavaScript"><a href="#原生JavaScript" class="headerlink" title="原生JavaScript"></a>原生JavaScript</h1><ol>
<li>图片定位<br>图片等宽，设置显示图片的列数，页面宽除以box的宽度<br>封装在waterfall()函数。先取得浏览器的可视宽度，然后通过除以每个展示框的宽度来计算出一排可以展示多少个展示框的，然后通过一个数组 hArr来保持每一列的高度。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params">parent,box</span>)</span>&#123;</div><div class="line">    <span class="comment">//将.main下所有.box取出来,该功能封装在getByClass()中</span></div><div class="line">    <span class="keyword">var</span> oParent = <span class="built_in">document</span>.getElementById(parent);</div><div class="line">   <span class="keyword">var</span> oBoxs = oParent.getElementsByClassName(<span class="string">'box'</span>);</div><div class="line">    <span class="comment">//计算列数 页面宽除以box的宽度</span></div><div class="line">    <span class="keyword">var</span> oBoxW = oBoxs[<span class="number">0</span>].offsetWidth;</div><div class="line">    <span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor(<span class="built_in">document</span>.documentElement.clientWidth/oBoxW);</div><div class="line">    <span class="comment">//设置main的宽度</span></div><div class="line">    oParent.style.cssText = <span class="string">"width:"</span>+oBoxW*cols+<span class="string">'px;margin:0 auto'</span>;</div><div class="line">     <span class="comment">//hArr数组存放每一列高度</span></div><div class="line">    <span class="keyword">var</span> hArr=[];</div><div class="line">    <span class="comment">//将box放入列高最短列</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oBoxs.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i&lt;cols) &#123;</div><div class="line">            hArr.push(oBoxs[i].offsetHeight);<span class="comment">//第一行</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">var</span> minH = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,hArr);</div><div class="line">            <span class="keyword">var</span> index = getMinhIndex(hArr,minH);</div><div class="line">            oBoxs[i].style.position = <span class="string">'absolute'</span>;</div><div class="line">            oBoxs[i].style.top = minH + <span class="string">'px'</span>;</div><div class="line">            <span class="comment">//oBoxs[i].style.left=oBoxW*index+'px';</span></div><div class="line">            oBoxs[i].style.left = oBoxs[index].offsetLeft + <span class="string">'px'</span>;</div><div class="line">            <span class="comment">//更新最短列高度</span></div><div class="line">            hArr[index] += oBoxs[i].offsetHeight;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>图片排序<br>功能：下一行的第一张图片加载上一行图片高度最小的下面，依然封装在waterfall()函数中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params">parent,box</span>)</span>&#123;</div><div class="line">    <span class="comment">//将.main下所有.box取出来,该功能封装在getByClass()中</span></div><div class="line">    <span class="keyword">var</span> oParent = <span class="built_in">document</span>.getElementById(parent);</div><div class="line">    <span class="keyword">var</span> oBoxs = oParent.getElementsByClassName(<span class="string">'box'</span>);</div><div class="line">    <span class="comment">//计算列数 页面宽除以box的宽度</span></div><div class="line">    <span class="keyword">var</span> oBoxW = oBoxs[<span class="number">0</span>].offsetWidth;</div><div class="line">    <span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor(<span class="built_in">document</span>.documentElement.clientWidth/oBoxW);</div><div class="line">    <span class="comment">//设置main的宽度</span></div><div class="line">    oParent.style.cssText = <span class="string">"width:"</span>+oBoxW*cols+<span class="string">'px;margin:0 auto'</span>;</div><div class="line">     <span class="comment">//hArr数组存放每一列高度</span></div><div class="line">    <span class="keyword">var</span> hArr=[];</div><div class="line">    <span class="comment">//将box依次放入列高最小的位置</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oBoxs.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i&lt;cols) &#123;</div><div class="line">            hArr.push(oBoxs[i].offsetHeight);<span class="comment">//第一行</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">var</span> minH= <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,hArr);</div><div class="line">            <span class="keyword">var</span> index= getMinhIndex(hArr,minH);</div><div class="line">            oBoxs[i].style.position  = <span class="string">'absolute'</span>;</div><div class="line">            oBoxs[i].style.top = minH+<span class="string">'px'</span>;</div><div class="line">            <span class="comment">//oBoxs[i].style.left=oBoxW*index+'px';</span></div><div class="line">            oBoxs[i].style.left = oBoxs[index].offsetLeft+<span class="string">'px'</span>;</div><div class="line">            <span class="comment">//修改每一列的高度</span></div><div class="line">            hArr[index] += oBoxs[i].offsetHeight;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取数组中高度最小的索引</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMinhIndex</span>(<span class="params">arr,val</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i]==val) &#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>图片持续加载<br>window.onscroll事件监听滚动条滚动事件，触发一个回调函数，先检测是否具有加载数据块的条件。思路：<br>判定最后一个盒子，根据wallterfall函数，下一个盒子一定会落在最短列上，而且马上更新最短列。缺点就是当某一张图片高度太大时，加载时周围可能会有空白。在checkScrollSlide()函数中最后一个盒子是指$(‘#main’)中的最后一个，就是已经加载的所有盒子的最后一个，随着滚动条下来$(‘#main’)中的盒子是不断增加的，被加载的盒子数量越来愈多，列高不断增加。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    waterfall(<span class="string">"main"</span>,<span class="string">"box"</span>);</div><div class="line">    <span class="comment">//模拟后台传给前端渲染的数据</span></div><div class="line">    <span class="keyword">var</span> dataInt=&#123;<span class="string">"data"</span>:[&#123;<span class="string">"src"</span>:<span class="string">'P_011.jpg'</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">'P_011.jpg'</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">'P_011.jpg'</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">'P_011.jpg'</span>&#125;]&#125;;</div><div class="line">    <span class="built_in">window</span>.onscroll=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (checkScrollSlide) &#123;</div><div class="line">            <span class="keyword">var</span> oParent=<span class="built_in">document</span>.getElementById(<span class="string">'#main'</span>);<span class="comment">//父级元素</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dataInt.data.length; i++) &#123;</div><div class="line">                <span class="comment">//添加class为box的div</span></div><div class="line">                <span class="keyword">var</span> oBox=<span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">                oBox.className=<span class="string">'box'</span>;</div><div class="line">                oParent.appendChild(oBox);</div><div class="line">                <span class="comment">//添加class为pic的div</span></div><div class="line">                <span class="keyword">var</span> oPic=<span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">                oBox.className=<span class="string">'pic'</span>;</div><div class="line">                oBox.appendChild(oPic);</div><div class="line">                <span class="comment">//添加图片</span></div><div class="line">                <span class="keyword">var</span> oImg= <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">                oImg.src=<span class="string">"images/"</span>+dataInt.data[i].src;</div><div class="line">                oPic.appendChild(oImg);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//重新为新增的盒子定位</span></div><div class="line">            waterfall(<span class="string">"main"</span>,<span class="string">"box"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//检测是否具有加载数据块的条件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScrollSlide</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oParent = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</div><div class="line">    <span class="keyword">var</span> oBoxs = oParent.getElementsByClassName(<span class="string">'box'</span>);</div><div class="line">    <span class="comment">//待加载图片距离父元素的高度</span></div><div class="line">    <span class="keyword">var</span>  lastBoxH = oBoxs[oBoxs.length<span class="number">-1</span>].offsetTop + <span class="built_in">Math</span>.floor(oBoxs[oBoxs.length<span class="number">-1</span>].offsetHeight/<span class="number">2</span>);</div><div class="line">    <span class="comment">//获取滚动条滚动的距离</span></div><div class="line">    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop||<span class="built_in">document</span>.documentElement.scrollTop;</div><div class="line">    <span class="comment">//获取窗口可视区的高度</span></div><div class="line">    <span class="keyword">var</span> height = <span class="built_in">document</span>.body.clientHeight||<span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">    <span class="keyword">return</span> (lastBoxH&lt;scrollTop+height)?<span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p>思路与上面一致<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    waterfall();</div><div class="line">    <span class="comment">//模拟后台传给前端渲染的数据</span></div><div class="line">    <span class="keyword">var</span> dateInt=&#123;<span class="string">"data"</span>:[&#123;<span class="string">"src"</span>:<span class="string">'P_011.jpg'</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">'P_011.jpg'</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">'P_011.jpg'</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">'P_011.jpg'</span>&#125;,&#123;<span class="string">"src"</span>:<span class="string">'P_011.jpg'</span>&#125;]&#125;;</div><div class="line">    $(windows).scroll(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="comment">/* 添加滚动条滚动事件 */</span></div><div class="line">        <span class="keyword">if</span> (checkScrollSlide) &#123;</div><div class="line">            $.each(dataInt.data, <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>) </span>&#123;</div><div class="line">                 <span class="keyword">var</span> oBox=$(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'box'</span>).appendTo($(<span class="string">'#main'</span>));</div><div class="line">                 <span class="keyword">var</span> oPic=$(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'pic'</span>).appendTo($(oBox));</div><div class="line">                 $(<span class="string">'&lt;img&gt;'</span>).attr(<span class="string">'src'</span>,<span class="string">'image/'</span>+$(val).attr(<span class="string">'src'</span>)).appendTo($(oPic));</div><div class="line"></div><div class="line"></div><div class="line">            &#125;);</div><div class="line">                 waterfall();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//动态添加瀑布图片的功能函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterfall</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> $boxs=$(<span class="string">"#main&gt;div"</span>);</div><div class="line">    <span class="comment">//一个图片框的宽</span></div><div class="line">    <span class="keyword">var</span> w=$boxs.eq(<span class="number">0</span>).outerWidth();</div><div class="line">    <span class="comment">//计算列数 页面宽除以box的宽度</span></div><div class="line">    <span class="keyword">var</span> cols=<span class="built_in">Math</span>.floor($(<span class="built_in">window</span>).width()/w);</div><div class="line">    <span class="comment">//设置main的宽度</span></div><div class="line">    $(<span class="string">'#main'</span>).width(w*cols).css(<span class="string">'margin'</span>,<span class="string">'0 auto'</span>);</div><div class="line">    <span class="comment">//存放每一列高度的数组</span></div><div class="line">    <span class="keyword">var</span> hArr=[];</div><div class="line">    <span class="comment">//将box依次放入列高最小的位置</span></div><div class="line">    $boxs.each(<span class="function"><span class="keyword">function</span>(<span class="params">index, el</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> h=$boxs.eq(index).outerHeight();</div><div class="line">        <span class="keyword">if</span> (index&lt;cols) &#123;</div><div class="line">            <span class="comment">//第一行</span></div><div class="line">            hArr[index]=h;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//数组HArr中的最小值minH</span></div><div class="line">            <span class="keyword">var</span>  minH= <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,hArr);</div><div class="line">            <span class="comment">//获取数组中高度最小的索引</span></div><div class="line">            <span class="keyword">var</span> minHIndex=$.inArray(minH, hArr);</div><div class="line">            $(el).css(&#123;</div><div class="line">                <span class="string">'position'</span>: <span class="string">'absolute'</span>,</div><div class="line">                <span class="string">'top'</span>:minH+ <span class="string">'px'</span>,</div><div class="line">                <span class="string">'left'</span>:minHIndex*w+<span class="string">'px'</span></div><div class="line">            &#125;);</div><div class="line">            <span class="comment">//更新添加了图片后的列高</span></div><div class="line">            hArr[minHIndex]+=$boxs.eq(index).outerHeight();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//检测是否具有加载数据块的条件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScrollSlide</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> $lastBox=$(<span class="string">'#main&gt;div'</span>).last();</div><div class="line">     <span class="comment">//待加载图片距离父元素的高度</span></div><div class="line">    <span class="keyword">var</span> lastBoxDis=$lastBox.offset().top+<span class="built_in">Math</span>.floor($lastBox.outerHeight()/<span class="number">2</span>);</div><div class="line">    <span class="comment">//获取滚动条滚动的距离</span></div><div class="line">    <span class="keyword">var</span> scrollTop=$(<span class="built_in">window</span>).scrollTop();</div><div class="line">    <span class="comment">//获得窗口的高度</span></div><div class="line">    <span class="keyword">var</span>  documentH=$(<span class="built_in">window</span>).height();</div><div class="line">    <span class="keyword">return</span> (lastBoxDis&lt;scrollTop+documentH)?<span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="css3-columns-多栏布局"><a href="#css3-columns-多栏布局" class="headerlink" title="css3 columns 多栏布局"></a>css3 columns 多栏布局</h1><p>column-width计算方法是窗口宽度除以定义的column-width，所以column-count与column-width不必同时出现。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#main</span>&#123;</div><div class="line">    <span class="attribute">-webkit-column-width</span>: <span class="number">202px</span>;</div><div class="line">    <span class="attribute">-moz-column-width</span>: <span class="number">202px</span>;</div><div class="line">    <span class="attribute">-o-column-width</span>: <span class="number">202px</span>;</div><div class="line">    <span class="attribute">column-width</span>: <span class="number">202px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="方式比较"><a href="#方式比较" class="headerlink" title="方式比较"></a>方式比较</h1><ol>
<li>javascript原生需要计算，列数 = 窗口宽度/图片框宽度，图片定位是根据每一列图片框的高度计算的。</li>
<li>浏览器自动计算，性能高，但是图片排序按照垂直顺序排列。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;瀑布流布局视觉表现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参差不齐的多栏布局，图片等宽不等高，下一行的第一张图片加载上一行图片高度最小的下面。&lt;/li&gt;
&lt;li&gt;图片持续加载到当前尾部。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://kongwsh.github.io/iComponents/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/mywaterfall.html&quot;&gt;瀑布流布局demo&lt;/a&gt;&lt;br&gt;效果实现方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原生javascript &lt;a href=&quot;https://github.com/Kongwsh/iComponents/blob/master/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/js/script.js&quot;&gt;源代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jQuery &lt;a href=&quot;https://github.com/Kongwsh/iComponents/blob/master/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/js/script1.js&quot;&gt;源代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;css3 columns 多栏布局 &lt;a href=&quot;https://github.com/Kongwsh/iComponents/blob/master/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/css/style1.css&quot;&gt;源代码&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>理解响应式布局</title>
    <link href="http://yoursite.com/2016/09/25/responsiveweb-0/"/>
    <id>http://yoursite.com/2016/09/25/responsiveweb-0/</id>
    <published>2016-09-25T07:36:08.000Z</published>
    <updated>2016-10-28T05:50:51.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="响应式布局概念"><a href="#响应式布局概念" class="headerlink" title="响应式布局概念"></a>响应式布局概念</h1><p>自适应布局：排版不变，对于分辨率和视区的变化不能很好的响应。<br>2010年，Ethan Marrate 首次提出响应式网站是一个理念，是多项技术的综合体。</p>
<a id="more"></a>
<p>需要三个技术：</p>
<ul>
<li>弹性网格布局 flexible grid layout</li>
<li>弹性图片 flexible image</li>
<li>媒体查询 media queries</li>
</ul>
<p>响应式设计使网站可以在任何的设备和任何尺寸的屏幕友好的访问，网站仅需要一个版本，可以完美适配任何尺寸的屏幕，在不同尺寸的设备中，网站展现出不同的设计风格。</p>
<p>响应式布局的优点：</p>
<ol>
<li>减少工作量</li>
<li>节省时间</li>
<li>每个设备都能得到正确的设计</li>
<li>搜索优化</li>
</ol>
<p>响应式布局的缺点:</p>
<ol>
<li>加载更多的样式和脚本</li>
<li>设计比较难精确定位和控制</li>
<li>老版本浏览器兼容性不好</li>
</ol>
<p><a href="https://kongwsh.github.io/iComponents/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80demo/src/index.html" target="_blank" rel="external">响应式布局demo</a><br><a href="https://github.com/Kongwsh/iComponents/tree/master/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80demo" target="_blank" rel="external">响应式布局demo源代码</a></p>
<h1 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h1><p>所谓的弹性布局，说的是在创建网站的时候，采用流体网格布局方式，动态地调整网站布局宽度以此来适应各种设备屏幕大小。</p>
<h2 id="测量单位使用相对长度单位（em-rem）"><a href="#测量单位使用相对长度单位（em-rem）" class="headerlink" title="测量单位使用相对长度单位（em/rem）"></a>测量单位使用相对长度单位（em/rem）</h2><p>因为视窗（ viewport ）的高度和宽度在不同设备之间是不断变化的。</p>
<ol>
<li>em相对参照物为父元素font-size</li>
<li>继承性，继续向上找祖父元素的font-size</li>
<li>如果没有设置font-size，则使用浏览器默认的字体大小，1em = 16px</li>
<li>缺点是容易混乱，因为祖父元素的font-size不一定一致。</li>
<li>rem的相对参照物为跟元素html，相对参照固定不变，解决了em的缺点，当没有设置font-size时，浏览器会有一个默认的rem，1rem=16px</li>
</ol>
<h2 id="flexbox"><a href="#flexbox" class="headerlink" title="flexbox"></a>flexbox</h2><p>CSS3 弹性盒子(Flexible Box 或 Flexbox)，是一种布局方式，当页面需要适应不同的屏幕大小以及设备类型时，它依然能确保元素拥有更恰当的排布行为。对很多应用程序来说，当不使用浮动，且弹性容器的外边距也不需要与其内容的外边距合并时，弹性盒子模型比起方框模型要好一些。<br>弹性盒子布局主要适用于应用程序的组件及小规模的布局，而（新兴的）栅格布局则针对大规模的布局。这二者都是 CSS 工作组为在不同用户代理、不同书写模式和其他灵活性要求下的网页应用程序有更好的互操作性而做出的更广泛的努力的一部分。<br>更多见：</p>
<ul>
<li><p><a href="https://www.w3.org/html/ig/zh/css-flex-1/#flex-containers" target="_blank" rel="external">W3C</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="external">MDN</a></p>
</li>
</ul>
<h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><p>css3中的媒体查询包含了一个媒体类型和至少一个使用如宽度、高度和颜色等媒体属性来限制样式表范围的表达式。<br>IE8及以下只能实现CSS2中的部分，即只可以设置媒体类型<br>媒体查询可以被用在CSS中的@media和@import规则上,也可以被用在HTML和XML中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@media screen and (width:800px)&#123; … &#125;</div><div class="line">@import url(example.css) screen and (width:800px);</div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">media</span>=<span class="string">"screen and (width:800px)"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"example.css"</span> /&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml-stylesheet media=<span class="string">"screen and (width:800px)"</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"example.css"</span> <span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure></p>
<h1 id="弹性媒介"><a href="#弹性媒介" class="headerlink" title="弹性媒介"></a>弹性媒介</h1><p>图片、视频和其它媒介类型应该具备可伸缩性，能根据浏览器窗口的大小，自动调整自身尺寸，保证页面布局整齐一致。</p>
<ol>
<li>图片排版布局</li>
<li>加载与用户设备相匹配的小图片，既快速，又不会影响用户体验</li>
</ol>
<p>如何实现响应式图片呢？<br>图片的宽度max-width：100%.</p>
<ol>
<li><p>js或服务端<br>通过js来控制图片加载，跟踪risize事件，修改图片的路径；或者通过把屏幕或者设备信息写入cookie，获取图片的时候在服务器端决定返回的图片。</p>
</li>
<li><p>srcset<br><code>&lt;img&gt;</code>中srcset属性,以逗号分隔的一个或多个字符串列表，字符串由图片路径 和尺寸描述符组成如<code>480w</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/480.png"</span> <span class="attr">class</span>=<span class="string">"image"</span></span></div><div class="line"><span class="attr">srcset</span>=<span class="string">"img/480.png 480w,img/800.png 800w，img/1600.png 1600w"</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>srcset配合sizes<br><code>&lt;img&gt;</code>中还有sizes属性配合srcset使用</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/*====100vw默认视口宽度====*/</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/480.png"</span> <span class="attr">class</span>=<span class="string">"image"</span></span></div><div class="line"><span class="attr">srcset</span>=<span class="string">"img/480.png 480w,img/800.png 800w，img/1600.png 1600w"</span></div><div class="line"><span class="attr">sizes</span>=<span class="string">"50vw"</span>&gt;</div><div class="line"></div><div class="line">/*媒体查询,当屏幕尺寸大于等于800px，图片的预估宽度为800px，其他情况是100vw*/</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/480.png"</span> <span class="attr">class</span>=<span class="string">"image"</span></span></div><div class="line"><span class="attr">srcset</span>=<span class="string">"img/480.png 480w,img/800.png 800w，img/1600.png 1600w"</span></div><div class="line"><span class="attr">sizes</span>=<span class="string">"(min-width:800px) 800px ,100vw"</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;picture&gt;</code>标签<br>一个<code>&lt;picture&gt;</code>标签包含任意个<code>&lt;source/&gt;</code>和一个<code>&lt;img&gt;</code>,浏览器会遍历source设置，哪一个满足条件就用那个，每个source设置媒体查询</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(max-width:36em)"</span></span></div><div class="line">            <span class="attr">srcset</span>=<span class="string">"img/123.jpg 768w"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(orientation:landscape)"</span></span></div><div class="line">            <span class="attr">srcset</span>=<span class="string">"img/123.jpg 768w"</span>&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/svg+xml"</span> <span class="attr">srcset</span>=<span class="string">"logo.svg 480w "</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">srcset</span>=<span class="string">"logo.webp 480w "</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"img/123.jpg 1800w"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/12311.jpg"</span> <span class="attr">class</span>=<span class="string">"image"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>SVG格式图片<br>SVG是可缩放矢量图形，缩放不变形，失真，矢量图形不是基于像素的，基于绘制规则<br>与位图相比的缺点是很难表现色彩丰富逼真的效果，很大。<br>一般来说logo，网站图片可以svg矢量图形<br>绘制工具：AI，Sketch<br>在线绘制：</p>
</li>
</ol>
<ul>
<li><a href="http://editor.method.ac/" target="_blank" rel="external">editor.method.ac</a></li>
<li><a href="https://icomoon.io" target="_blank" rel="external">icomoon.io</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;响应式布局概念&quot;&gt;&lt;a href=&quot;#响应式布局概念&quot; class=&quot;headerlink&quot; title=&quot;响应式布局概念&quot;&gt;&lt;/a&gt;响应式布局概念&lt;/h1&gt;&lt;p&gt;自适应布局：排版不变，对于分辨率和视区的变化不能很好的响应。&lt;br&gt;2010年，Ethan Marrate 首次提出响应式网站是一个理念，是多项技术的综合体。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>理解回调函数，回调地狱，Promise</title>
    <link href="http://yoursite.com/2016/09/11/callback/"/>
    <id>http://yoursite.com/2016/09/11/callback/</id>
    <published>2016-09-11T07:36:08.000Z</published>
    <updated>2016-10-17T04:52:34.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在计算机程序设计中，回调函数，或简称回调（Callback 即call then back 被主函数<br>调用运算后会返回主函数），是指通过函数参数传递到其它代码的，某一块可执行代码<br>的引用。这一设计允许了底层代码调用在高层定义的子程序。<br>                                                                 —维基百科</p>
</blockquote>
<a id="more"></a>
<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>因为JavaScript是单线程执行的，所以JavaScript的所有网络操作，浏览器事件，都必须是异步执行。异步就是不是马上发生，异步执行可以用回调函数实现，通常，只有在做一些I/O操作的时候会使用回调函数，比如下载，读取文件，与数据库交互等。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Done'</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'before setTimeout()'</span>);</div><div class="line">setTimeout(callback, <span class="number">1000</span>); <span class="comment">// 1秒钟后调用callback函数</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'after setTimeout()'</span>);</div><div class="line"></div><div class="line"></div><div class="line">输出：</div><div class="line">before setTimeout()</div><div class="line">after setTimeout()</div><div class="line">(等待<span class="number">1</span>秒后)</div><div class="line">Done</div></pre></td></tr></table></figure></p>
<h1 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h1><p>callback hell是指，回调的多了，会让代码看起来不好理解，因为在视觉上，代码是从上到下执行的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">fs.readdir(source, <span class="function"><span class="keyword">function</span> (<span class="params"> err, files </span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> ( err ) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Error finding files: '</span> + err);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params"> filename, fileIndex </span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(filename);</div><div class="line">            gm(source + filename).size(<span class="function"><span class="keyword">function</span> (<span class="params"> err, values </span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> ( err ) &#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">'Error identifying file size: '</span> + err);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="built_in">console</span>.log(filename + <span class="string">' : '</span> + values);</div><div class="line">                    aspect = (values.width / values.height);</div><div class="line">                    widths.forEach(<span class="function"><span class="keyword">function</span> (<span class="params"> width, widthIndex </span>) </span>&#123;</div><div class="line">                        height = <span class="built_in">Math</span>.round(width / aspect);</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">'resizing '</span> + filename + <span class="string">'to '</span> + height + <span class="string">'x'</span> + height);</div><div class="line">                        <span class="keyword">this</span>.resize(width, height).write(dest + <span class="string">'w'</span> + width + <span class="string">'_'</span> + filename, <span class="function"><span class="keyword">function</span> (<span class="params"> err </span>) </span>&#123;</div><div class="line">                            <span class="keyword">if</span> ( err ) <span class="built_in">console</span>.log(<span class="string">'Error writing file: '</span> + err);</div><div class="line">                        &#125;);</div><div class="line">                    &#125;.bind(<span class="keyword">this</span>));</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.erichain.me/front-end/full-stack/2016/02/27/how-to-avoid-callback-hell.html" target="_blank" rel="external">“回调地狱”如何避免</a></p>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>Promise为异步编程而生，有了Promise对象就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。<br>Promise/A+规范, 规定Promise对象是一个有限状态机。它三个状态：</p>
<ul>
<li>pending（执行中）</li>
<li>fulfilled（成功）</li>
<li>reject（拒绝）</li>
</ul>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="comment">// ... some code</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>API:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.prototype.then()</div><div class="line"><span class="comment">//Promise实例的状态变为Resolved，就会触发then方法绑定的回调函数。</span></div><div class="line"><span class="built_in">Promise</span>.prototype.catch()</div><div class="line"><span class="comment">//Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。</span></div><div class="line"><span class="built_in">Promise</span>.race()</div><div class="line"><span class="comment">//将多个Promise实例，包装成一个新的Promise实例。</span></div><div class="line"><span class="built_in">Promise</span>.resolve()</div><div class="line"><span class="comment">//将现有对象转为Promise对象</span></div><div class="line"><span class="built_in">Promise</span>.reject(reason)</div><div class="line"><span class="comment">//返回一个新的Promise实例，该实例的状态为rejected。它的参数用法与Promise.resolve方法完全一致。</span></div><div class="line">done()</div><div class="line"><span class="comment">//总是处于回调链的尾端，保证抛出任何可能出现的错误</span></div><div class="line"><span class="keyword">finally</span>()</div><div class="line"><span class="comment">//指定不管Promise对象最后状态如何，都会执行的操作</span></div></pre></td></tr></table></figure></p>
<p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//生成一个0-2之间的随机数，如果小于1，则等待一段时间后返回成功，否则返回失败</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> timeOut = <span class="built_in">Math</span>.random() * <span class="number">2</span>;</div><div class="line">    log(<span class="string">'set timeout to: '</span> + timeOut + <span class="string">' seconds.'</span>);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (timeOut &lt; <span class="number">1</span>) &#123;</div><div class="line">            log(<span class="string">'call resolve()...'</span>);</div><div class="line">            resolve(<span class="string">'200 OK'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            log(<span class="string">'call reject()...'</span>);</div><div class="line">            reject(<span class="string">'timeout in '</span> + timeOut + <span class="string">' seconds.'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, timeOut * <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//有了执行函数，我们就可以用一个Promise对象来执行它，并在将来某个时刻获得成功或失败的结果</span></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(test);</div><div class="line"><span class="comment">//当test函数执行成功时</span></div><div class="line"><span class="keyword">var</span> p2 = p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'成功：'</span> + result);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//当test函数执行失败时</span></div><div class="line"><span class="keyword">var</span> p3 = p2.catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'失败：'</span> + reason);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><a href="http://es6.ruanyifeng.com/#docs/promise#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95" target="_blank" rel="external">阮一峰 ECMAScript 6 入门之Promise对象</a><br><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000" target="_blank" rel="external">廖雪峰学习网站之Promise</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在计算机程序设计中，回调函数，或简称回调（Callback 即call then back 被主函数&lt;br&gt;调用运算后会返回主函数），是指通过函数参数传递到其它代码的，某一块可执行代码&lt;br&gt;的引用。这一设计允许了底层代码调用在高层定义的子程序。&lt;br&gt;                                                                 —维基百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器模式和文档模式</title>
    <link href="http://yoursite.com/2016/09/02/html-1/"/>
    <id>http://yoursite.com/2016/09/02/html-1/</id>
    <published>2016-09-02T07:36:08.000Z</published>
    <updated>2016-10-17T02:56:22.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器模式（Browser-Mode）"><a href="#浏览器模式（Browser-Mode）" class="headerlink" title="浏览器模式（Browser Mode）"></a>浏览器模式（Browser Mode）</h1><p>浏览器模式（Browser Mode），用于切换IE针对该网页的默认文档模式、对不同版本浏览器的条件注释解析、决定请求头里userAgent的值。它在浏览器发出请求之前就已经确定，网站没有办法修改这个值。它代表的是用户以何种浏览器访问网站。<br>IE11已经改名为“用户代理字符串”，其实是用来设置navigator.userAgent和navigator.appVersion的。</p>
<a id="more"></a>
<img src="/images/IE11.png" title="IE11开发者工具栏">
<p>在不同的IE版本中，它与文档模式的关系可不相同。</p>
<p>IE89中，倘若浏览器模式被设置为IE7，那么文档模式的只能设置为7,6,5；</p>
<p>IE11中，用户代理字符串设置和文档模式并没有什么关系。</p>
<h1 id="文档模式（Document-Mode）"><a href="#文档模式（Document-Mode）" class="headerlink" title="文档模式（Document Mode）"></a>文档模式（Document Mode）</h1><p>“文档模式”用于指定IE的页面排版引擎（Trident）以哪个版本的方式来解析并渲染网页代码。切换文档模式会导致网页被刷新，但不会更改用户代理字符串中的版本号，也不会从服务器重新下载网页。切换浏览器模式的同时，浏览器也会自动切换到相应的文档模式。</p>
<p><strong>历史</strong>：在很久以前的网络上，页面通常有两种版本：为网景（Netscape）的 Navigator准备的版本以及为微软（Microsoft）的 Internet Explorer准备的版本。当 W3C 创立网络标准后，为了不破坏当时既有的网站，浏览器不能直接起用这些标准。因此，浏览器采用了两种模式，用以把能符合新规范的网站和老旧网站区分开。</p>
<ol>
<li>怪异模式（Quirks mode）<br>简单来说，怪异模式就是浏览器为了兼容很早之前针对旧版本浏览器设计、并未严格遵循 W3C 标准的网页而产生的一种页面渲染模式。</li>
<li>标准模式（Standards mode）<br>标准模式是与 Quirks Mode 对应的，在“标准模式”(standards mode) 页面按照 HTML 与 CSS 的定义渲染。</li>
<li>接近标准模式（Almost standards mode）<br>接近标准模式和标准模式几乎一致，唯一的区别就在于某些情况下接近标准模式会采用与 怪异模式相同的方式来绘制页面。当把图片分割后显示在一个表格单元中时，接近标准模式与怪异模式采用同样的绘制方式从而让图片显示不像在标准模式中那么的四分五裂。</li>
</ol>
<p>文档模式的不同由渲染引擎(Rendering Engine)即浏览器内核产生的，渲染引擎主要包含两部分，一部分为排版引擎负责 HTML、CSS 代码的解析，另一部分javascript引擎负责脚本代码解析，这两部分合起来就可以绘制出完整的页面。</p>
<table>
<thead>
<tr>
<th style="text-align:left">browser</th>
<th style="text-align:left">内核</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">IE</td>
<td style="text-align:left">Trident</td>
</tr>
<tr>
<td style="text-align:left">Edge</td>
<td style="text-align:left">Edge</td>
</tr>
<tr>
<td style="text-align:left">Chrome</td>
<td style="text-align:left">Blink</td>
</tr>
<tr>
<td style="text-align:left">Firefox</td>
<td style="text-align:left">gecko</td>
</tr>
<tr>
<td style="text-align:left">Safari</td>
<td style="text-align:left">webkit</td>
</tr>
<tr>
<td style="text-align:left">Opera</td>
<td style="text-align:left">Blink</td>
</tr>
</tbody>
</table>
<p>对每一种渲染引擎而言，随着版本的发展其渲染页面的方式也有很大的不同。<br>IE 是最早提出 Quirks Mode 与 Standards Mode（与 Quirks 相对应的一种模式）的，后来 Firefox、Chrome、Safari、Opera 等浏览器也都支持了这两种渲染方式。</p>
<h1 id="服务器改变浏览器文档模式的方法"><a href="#服务器改变浏览器文档模式的方法" class="headerlink" title="服务器改变浏览器文档模式的方法"></a>服务器改变浏览器文档模式的方法</h1><p>浏览器模式决定：1）发送给服务端的UA；2）默认的文档模式；3）如何解析条件注释。它在请求发送前就已经确定，且不受服务端控制。<br>文档模式决定：1）排版引擎；2）JS引擎。它在浏览器得到响应后最终确定，服务端可通过doctype或X-UA-Compatible来控制。</p>
<h2 id="Doctype-检测"><a href="#Doctype-检测" class="headerlink" title="Doctype 检测"></a>Doctype 检测</h2><p>DOCTYPE是document type(文档类型)的简写，用来说明XHTML或者HTML是什么版本。<br>其中的DTD(document type definition)叫文档类型定义，里面包含了文档的规则，浏览器就根据你定义的DTD来解释你页面的标识，并展现出来。要建立符合标准的网页，DOCTYPE声明是必不可少的关键组成部分。</p>
<ol>
<li><p>在 HTML5中，DOCTYPE 唯一的作用是启用标准模式。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启用标准模式HTML 4.01 Strict</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启用接近标准模式HTML 4.01 Transitional</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>当 doctype 缺失的时候，浏览器会选择怪异模式。</p>
</li>
</ol>
<h2 id="x-ua-compatible-信息"><a href="#x-ua-compatible-信息" class="headerlink" title="x-ua-compatible 信息"></a>x-ua-compatible 信息</h2><p>触发IE 最新版本的标准模式，在<code>&lt;head&gt;</code>标签中加入元标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span> &gt;</span></div></pre></td></tr></table></figure>
<p>在请求消息对应的响应头加入下面代码与上一句效果一样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.setHeader(<span class="string">"X-UA-Compatible"</span>,<span class="string">"IE=Edge"</span>);</div></pre></td></tr></table></figure>
<p>页面、服务器HTTP Header都设置了X-UA-Compatible的情况，使用页面的X-UA-Compatible设置。页面无X-UA-Compatible，才使用HTTP Header设置的值。</p>
<p>把X-UA-Compatible写在<code>&lt;link&gt;</code>或<code>&lt;script&gt;</code>标签下面，否则X-UA-Compatible的设置无效。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li>2014年<a href="http://www.cnblogs.com/fsjohnhuang/p/3817418.html" target="_blank" rel="external">JS魔法堂：浏览器模式和文档模式怎么玩？ </a></li>
<li>2013年<a href="http://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/index.html" target="_blank" rel="external">怪异模式（Quirks Mode）对 HTML 页面的影响</a></li>
<li>2012年<a href="https://imququ.com/post/browser-mode-and-document-mode-in-ie.html" target="_blank" rel="external">关于浏览器模式和文本模式的困惑</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器模式（Browser-Mode）&quot;&gt;&lt;a href=&quot;#浏览器模式（Browser-Mode）&quot; class=&quot;headerlink&quot; title=&quot;浏览器模式（Browser Mode）&quot;&gt;&lt;/a&gt;浏览器模式（Browser Mode）&lt;/h1&gt;&lt;p&gt;浏览器模式（Browser Mode），用于切换IE针对该网页的默认文档模式、对不同版本浏览器的条件注释解析、决定请求头里userAgent的值。它在浏览器发出请求之前就已经确定，网站没有办法修改这个值。它代表的是用户以何种浏览器访问网站。&lt;br&gt;IE11已经改名为“用户代理字符串”，其实是用来设置navigator.userAgent和navigator.appVersion的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>offsetHeight,clientHeight,scrollHeight</title>
    <link href="http://yoursite.com/2016/09/02/html-0/"/>
    <id>http://yoursite.com/2016/09/02/html-0/</id>
    <published>2016-09-02T03:31:08.000Z</published>
    <updated>2016-10-15T13:52:07.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTMLElement-offsetHeight"><a href="#HTMLElement-offsetHeight" class="headerlink" title="HTMLElement.offsetHeight"></a>HTMLElement.offsetHeight</h1><ol>
<li>只读属性,且是一个整数</li>
<li>元素的边框+垂直内边距+元素的水平滚动条（如果存在且渲染）+元素的CSS高度</li>
<li>offsetHeight 是一个DOM属性，由MSIE首次提出。它有时被称为一个元素的物理/图形的尺寸，或是一个元素的边界框（border-box）的高度。</li>
</ol>
<a id="more"></a>
<img src="/images/offset.png" title="offsetHeight">
<h1 id="Element-clientHeight"><a href="#Element-clientHeight" class="headerlink" title="Element.clientHeight"></a>Element.clientHeight</h1><img src="/images/client.png" title="clientHeight">
<ol>
<li>只读属性,且是一个整数</li>
<li>CSS height + CSS padding - 水平滚动条高度 (如果存在)</li>
</ol>
<h1 id="Element-scrollHeight"><a href="#Element-scrollHeight" class="headerlink" title="Element.scrollHeight"></a>Element.scrollHeight</h1><img src="/images/ScrollHeight.png" title="scrollHeight">
<ol>
<li>只读属性,且是一个整数</li>
<li>CSS height + CSS padding + overflow样式属性导致的视图中不可见内容</li>
<li>没有垂直滚动条的情况下，scrollHeight值与元素视图填充所有内容所需要的最小值clientHeight相同</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTMLElement-offsetHeight&quot;&gt;&lt;a href=&quot;#HTMLElement-offsetHeight&quot; class=&quot;headerlink&quot; title=&quot;HTMLElement.offsetHeight&quot;&gt;&lt;/a&gt;HTMLElement.offsetHeight&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;只读属性,且是一个整数&lt;/li&gt;
&lt;li&gt;元素的边框+垂直内边距+元素的水平滚动条（如果存在且渲染）+元素的CSS高度&lt;/li&gt;
&lt;li&gt;offsetHeight 是一个DOM属性，由MSIE首次提出。它有时被称为一个元素的物理/图形的尺寸，或是一个元素的边界框（border-box）的高度。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计学习笔记（二）继承模式</title>
    <link href="http://yoursite.com/2016/08/25/javascript-3/"/>
    <id>http://yoursite.com/2016/08/25/javascript-3/</id>
    <published>2016-08-25T09:35:08.000Z</published>
    <updated>2016-10-10T01:14:05.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>JavaScript的继承主要依靠原型链来实现的。我们知道，构造函数，原型，和实例之间的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个原型对象的指针。</p>
<a id="more"></a>
<p>实现原型链的方式如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.property=<span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">SuperType.prototype.getSuperValue=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.subpropertype=<span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//让原型对象称为另一个构造函数的实例</span></div><div class="line">SubType.prototype=<span class="keyword">new</span> SuperType();</div><div class="line"></div><div class="line">SubType.prototype.getSubValue=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subpropertype;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span>  instance=<span class="keyword">new</span> SubType();</div><div class="line">alert(instance.getSuperValue());<span class="comment">//true</span></div><div class="line"><span class="comment">//？这个实例继承了SuperType.prototype的constructor属性？</span></div><div class="line">alert(instance.constructor==SuperType);<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>上述代码继承是通过<code>SubType.prototype=new SuperType();</code>来实现，创建<code>SuperType</code>的实例，并将该实例赋给<code>SubType.prototype</code>。</p>
<p><strong>继承实现的本质是重写原型对象，代之以一个新类型的实例。</strong></p>
<p>下图为构造函数，实例以及原型之间的关系图：<br><img src="/images/Inheritance.jpg" title="继承"></p>
<blockquote>
<p>原型链顶端:所有引用类型都默认继承Object，所以，所有函数的默认原型都是Object的实例，默认原型都会包含一个内部指针[[prototype]]，指向Object.prototype。</p>
</blockquote>
<h2 id="原型链缺点"><a href="#原型链缺点" class="headerlink" title="原型链缺点"></a>原型链缺点</h2><ol>
<li>实例属性变为原型属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.color=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">instance1.color.push(<span class="string">"black"</span>);</div><div class="line">alert(instance1.color);<span class="comment">//"red,green,blue,black"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance2.color);<span class="comment">//"red,green,blue,black"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这个问题似曾相识，正是原型模式创建对象时由于共享引用类型属性，导致牵一发动全身的问题。</p>
<ol>
<li>在创建子类型时，不能向超类型的构造函数传递参数。</li>
</ol>
<p>所以，单独使用原型链情况较少。</p>
<h1 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h1><p>针对原型链的第一个问题，我们可采用借用构造函数的技术来解决。基本思想就是在子类型构造函数的内部调用超类型构造函数。看例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.color=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//继承自SuperType</span></div><div class="line">    SuperType.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">instance1.color.push(<span class="string">"black"</span>);</div><div class="line">alert(instance1.color);<span class="comment">//"red,green,blue,black"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance2.color);<span class="comment">//"red,green,blue"</span></div></pre></td></tr></table></figure></p>
<p>在新创建的SubType子类型的实例中调用SuperType超类型构造函数，就可以在新的实例对象上执行SuperType()函数中定义的所有对象初始化代码。问题不就解决了吗！<br><strong>但是</strong>，这种模式的缺点是在超类型中定义的方法，对子类型是不可见的，无法实现共享方法。<br>所以，这种方法也不常用。</p>
<h1 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h1><p>组合上述两种方法就是组合继承。用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承。无疑，集两者之大成，这才是最常用的继承模式。看：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="keyword">this</span>.color=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line">&#125;</div><div class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SubType</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="comment">//继承了SuperType</span></div><div class="line">    SuperType.call(<span class="keyword">this</span>,name);</div><div class="line">    <span class="comment">//自己又添加了一个</span></div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="comment">//构建原型链</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"><span class="comment">//重写SubType.prototype的constructor属性，指向自己的构造函数SubType</span></div><div class="line">SubType.prototype.constructor=SubType;</div><div class="line"><span class="comment">//原型方法，被实例们共享</span></div><div class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nichola"</span>,<span class="number">29</span>);</div><div class="line">instance1.color.push(<span class="string">"black"</span>);</div><div class="line">alert(instance1.color);<span class="comment">//"red,green,blue,black"</span></div><div class="line">instance1.sayName();<span class="comment">//"Nichola"</span></div><div class="line">instance1.sayAge();<span class="comment">//29</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"Grey"</span>,<span class="number">24</span>);</div><div class="line">alert(instance2.color);<span class="comment">//"red,green,blue"</span></div><div class="line">instance2.sayAge();<span class="comment">//24</span></div><div class="line">instance2.sayName();<span class="comment">//"Grey"</span></div></pre></td></tr></table></figure></p>
<p>这个方案已经看似perfect了。<strong>但是</strong>，后面再说。</p>
<h1 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h1><p><em>借助原型</em>可以基于已有的对象创建新的对象，不必因此创建自定义类型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;     <span class="comment">//返回一个对象以传入对象为原型</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person =&#123;</div><div class="line">    name:<span class="string">"Nichola"</span>,</div><div class="line">    friends:[<span class="string">"Shelly"</span>,<span class="string">"Court"</span>,<span class="string">"Van"</span>]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1 = object(person);</div><div class="line">person1.name = <span class="string">"Grey"</span>;</div><div class="line">person1.friends.push(<span class="string">"Rob"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = object(person);</div><div class="line">person2.name = <span class="string">"Linda"</span>;</div><div class="line">person2.friends.push(<span class="string">"Barble"</span>);</div><div class="line"></div><div class="line">alert(person.friends);<span class="comment">//"Shelly,Court,Van,Grey,Barble"</span></div></pre></td></tr></table></figure></p>
<p>使用场合：需求简单，只需要让新对象与已有对象保持相似。优点，不必创建构造函数，缺点，包含引用类型值的属性始终共享相应的值。<br><strong>Object.create()正是为实现这种模式诞生。</strong></p>
<h1 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h1><p>与原型式继承相似，也是基于某个对象或某些信息创建对象，然后增强对象，最后返回对象。实现方法：创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后返回这个对象。看！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> clone = object(original);<span class="comment">//通过调用函数创建对象</span></div><div class="line">    clone.sayHi= <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;    <span class="comment">//增强对象</span></div><div class="line">        alert(<span class="string">"Hi"</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> clone;<span class="comment">//返回对象</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//可以返回新对象的函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person =&#123;</div><div class="line">    name:<span class="string">"Nichola"</span>,</div><div class="line">    friends:[<span class="string">"Shelly"</span>,<span class="string">"Court"</span>,<span class="string">"Van"</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherPerson = createAnother(person);</div><div class="line">anotherPerson.sayHi();<span class="comment">//"Hi"</span></div></pre></td></tr></table></figure></p>
<p>这种继承模式适用的场合：任何返回新对象的函数都可以。缺点是不能做到函数复用。</p>
<h1 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h1><p>上面说到组合继承也有缺点，就是无论在何种情况下，都会调用两次超类型构造函数，一次是在创建子类型原型时，还有一次是在子类型构造函数内部。<br>这种模式集中了寄生式和组合式继承的优点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="keyword">this</span>.color=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//第二次调用SuperType()</span></div><div class="line">    SuperType.call(<span class="keyword">this</span>,name);</div><div class="line"> </div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="comment">//第一次调用SuperType()</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"></div><div class="line">SubType.prototype.constructor=SubType;</div><div class="line"></div><div class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nichola"</span>,<span class="number">29</span>);</div></pre></td></tr></table></figure></p>
<p>第一次调用SuperType():给SubType.prototype写入两个属性name，color<br>第二次调用SuperType()：给instance1写入两个属性name，color<br>实例对象instance1上的两个属性就屏蔽了其原型对象SubType.prototype的两个同名属性。所以，组合模式的缺点就是在SubType.prototype上创建不必要的重复的属性。<br>寄生组合式继承基本模式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">inheritPrototype</span>(<span class="params">SubType,SuperType</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> prototype = object(superType.prototype);<span class="comment">//创建对象</span></div><div class="line">    prototype.constructor = SubType;<span class="comment">//增强对象</span></div><div class="line">    SubType.prototype = prototype;<span class="comment">//制定对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先，创建超类型的一个副本；<br>其次，为副本添加constructor属性，使其指向子类型构造函数；<br>最后，将副本赋值给子类型原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="keyword">this</span>.color=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    SuperType.call(<span class="keyword">this</span>.name);</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">inheritPrototype</span>(<span class="params">SubType,SuperType</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> prototype = object(superType.prototype);<span class="comment">//创建对象</span></div><div class="line">    prototype.constructor = SubType;<span class="comment">//增强对象</span></div><div class="line">    SubType.prototype = prototype;<span class="comment">//制定对象</span></div><div class="line">&#125;</div><div class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nichola"</span>,<span class="number">29</span>);</div></pre></td></tr></table></figure></p>
<p>借用构造函数来继承实例属性，使用寄生式继承来继承超类型的原型，然后再将结果赋给子类型原型。这样既可以继承超类型的实例属性，也可继承超类型原型中的原型属性。这是最优解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h1&gt;&lt;p&gt;JavaScript的继承主要依靠原型链来实现的。我们知道，构造函数，原型，和实例之间的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个原型对象的指针。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>原生JavaScript与jQueryAPI对比</title>
    <link href="http://yoursite.com/2016/08/25/javascript-4/"/>
    <id>http://yoursite.com/2016/08/25/javascript-4/</id>
    <published>2016-08-25T07:36:08.000Z</published>
    <updated>2016-10-20T05:31:18.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元素查找"><a href="#元素查找" class="headerlink" title="元素查找"></a>元素查找</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Node</span></div><div class="line"><span class="built_in">document</span>.getElementById(id); <span class="comment">// document.getElementById('test')</span></div><div class="line"><span class="built_in">document</span>.querySelector(selectors);</div><div class="line"><span class="comment">//该方法接收一个css选择符，返回与该模式匹配的第一个元素，如果没有，返回null</span></div><div class="line"><span class="comment">//Document类型调用会在文档元素内容类查找，Element类型调用会该元素后代范围内查找</span></div><div class="line"><span class="comment">// document.querySelector('#test div')</span></div><div class="line"><span class="built_in">document</span>.doctype；</div><div class="line"><span class="comment">//doctype 是一个只读属性.</span></div><div class="line"><span class="comment">//返回当前文档关联的文档类型定义(DTD).</span></div><div class="line"><span class="comment">//如果当前文档没有DTD,则该属性返回null.</span></div><div class="line"><span class="comment">//在HTML文档中,如果文档有DTD,则该属性等价于document.firstChild.</span></div><div class="line"></div><div class="line"><span class="built_in">document</span>.documentElement；</div><div class="line"><span class="comment">//document.documentElement 是一个只读属性，返回文档对象（document）的根元素（例如，HTML文档的 &lt;html&gt; 元素）。</span></div><div class="line"><span class="built_in">document</span>.head</div><div class="line"><span class="comment">//返回当前文档中的 &lt;head&gt; 元素。如果有多个 &lt;head&gt; 元素，则返回第一个。</span></div><div class="line"><span class="comment">//document.head 是个只读属性</span></div><div class="line"><span class="built_in">document</span>.title</div><div class="line"><span class="comment">//获取或设置文档的标题。</span></div><div class="line"><span class="comment">//title 是一个包含 document 标题的字符串。如果通过设置 document.title 将标题覆盖，则返回覆盖后的值</span></div><div class="line"><span class="built_in">document</span>.body</div><div class="line"><span class="comment">//返回当前文档中的&lt;body&gt;元素或者&lt;frameset&gt;元素.</span></div><div class="line"><span class="comment">//该属性是可写的,且为该属性赋的值必须是一个&lt;body&gt;元素</span></div><div class="line"></div><div class="line"><span class="comment">// NodeList</span></div><div class="line"><span class="built_in">document</span>.getElementsByClassName(names) <span class="comment">// document.getElementsByClassName('test')</span></div><div class="line"><span class="built_in">document</span>.getElementsByName(name) <span class="comment">// document.getElementsByName('demo')</span></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(name) <span class="comment">// document.getElementsByTagName('div')</span></div><div class="line"><span class="built_in">document</span>.getElementsByTagNameNS(namespace, name) <span class="comment">// document.getElementsByTagNameNS('http://www.w3.org/1999/xhtml', 'div')</span></div><div class="line"><span class="built_in">document</span>.querySelectorAll(selectors) <span class="comment">// document.querySelectorAll('#test div')</span></div><div class="line"><span class="built_in">document</span>.links</div><div class="line"><span class="comment">//links 属性返回一个包含文档中所有具有 href 属性值的 &lt;area&gt; 元素 &lt;a&gt; 元素的集合</span></div><div class="line"><span class="built_in">document</span>.scripts</div><div class="line"><span class="comment">//返回一个HTMLCollection对象,包含了当前文档中所有&lt;script&gt;元素的集合.</span></div><div class="line"><span class="comment">//可以像使用数组一样通过索引来获取其中包含的&lt;script&gt;元素.</span></div><div class="line"><span class="built_in">document</span>.images</div><div class="line"><span class="comment">//document.images 返回当前文档中所有 image 元素的集合.</span></div><div class="line"><span class="built_in">document</span>.embeds</div><div class="line"><span class="comment">//返回一个HTMLCollection对象,包含了嵌入到当前文档中的所有的OBJECT对象</span></div><div class="line"><span class="built_in">document</span>.forms</div><div class="line"><span class="comment">//返回一个包含了当前文档中的所有 form 元素的集合 (一个HTMLCollection对象)</span></div><div class="line"><span class="comment">//var selectForm = document.forms[index];</span></div><div class="line"><span class="comment">//var selectFormElement = document.forms[index].elements[index];</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>jQuery：选择器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$( <span class="string">"#id"</span> )<span class="comment">//id选择器</span></div><div class="line">$( <span class="string">".class"</span> )<span class="comment">//class选择器</span></div><div class="line">$( <span class="string">"element"</span> )<span class="comment">//元素选择器，根据给定（html）标记名称选择所有的元素</span></div><div class="line">$( <span class="string">"*"</span> )<span class="comment">//全选择器</span></div><div class="line">$(<span class="string">"parent &gt; child"</span>)<span class="comment">//子选择器</span></div><div class="line">$(<span class="string">"ancestor descentdant"</span>)<span class="comment">//后代选择器</span></div><div class="line">$(<span class="string">"prev + next"</span>)<span class="comment">//相邻兄弟选择器</span></div><div class="line">$(<span class="string">"prev ~ next"</span>)<span class="comment">//一般兄弟选择器</span></div><div class="line"></div><div class="line"><span class="comment">//基本筛选选择器</span></div><div class="line">$(<span class="string">":first"</span>)</div><div class="line"><span class="comment">//匹配的第一个元素，如第一个div元素为$(".div:first").css("color","#CD00CD");</span></div><div class="line">$(<span class="string">":last"</span>)</div><div class="line"><span class="comment">//匹配的最后一个元素，如最后一个div元素为$(".div:last").css("color","#CD00CD");</span></div><div class="line">$(<span class="string">":not(selector)"</span>)</div><div class="line"><span class="comment">//选择不包含括号里面的选择器元素，如 选中所有没有checked属性的input元素后的p元素，赋予颜色$("input:not(checked)+p  ").css("background-color", "#CD00CD");</span></div><div class="line">$(<span class="string">"eq(index)"</span>)</div><div class="line"><span class="comment">//在匹配的集合选择索引值等于index的元素【eq=equal,等于的意思】</span></div><div class="line">$(<span class="string">":even"</span>)</div><div class="line"><span class="comment">//选择索引值为偶数的元素，从0开始计数。【even偶数】</span></div><div class="line">$(<span class="string">":odd"</span>)</div><div class="line"><span class="comment">//选择索引值为奇数的元素，从0开始计数。【odd奇数】</span></div><div class="line">$(<span class="string">":gt(index)"</span>)</div><div class="line"><span class="comment">//选择匹配集合中，所有大于给定index(索引值)的元素。【gt=greater than(意思是大于)】</span></div><div class="line">$(<span class="string">":lt(index)"</span>)</div><div class="line"><span class="comment">//选择匹配集合中，所有小于等于给定index(索引值)的元素。【less than(意思是小于)】</span></div><div class="line">$(<span class="string">":header"</span>)</div><div class="line"><span class="comment">//选择所有标题元素，如h1,h2,h3等</span></div><div class="line">$(<span class="string">":lang(language)"</span>)</div><div class="line"><span class="comment">//选择指定语言的所有元素。</span></div><div class="line">$(<span class="string">":root"</span>)</div><div class="line"><span class="comment">//选择该文档的根元素。</span></div><div class="line">$(<span class="string">":animated"</span>)</div><div class="line"><span class="comment">//选择所有正在执行动画效果的元素</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//内容筛选选择器</span></div><div class="line">$(<span class="string">":contains(text)"</span>)</div><div class="line"><span class="comment">//选择所有包含指定文本的元素</span></div><div class="line">$(<span class="string">":parent"</span>)</div><div class="line"><span class="comment">//选择所有含有子元素或者文本的元素</span></div><div class="line">$(<span class="string">":empty"</span>)</div><div class="line"><span class="comment">//选择所有没有子元素或者文本的元素</span></div><div class="line">$(<span class="string">":has(selector)"</span>)</div><div class="line"><span class="comment">//选择元素中至少包含指定元素的元素</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//可见性筛选选择器</span></div><div class="line">$(<span class="string">":visible"</span>)</div><div class="line"><span class="comment">//选择所有显示的元素，如果元素任然占据空间布局时，是被浏览器认为是可见的</span></div><div class="line"><span class="comment">//所有visibility:hidden和opacity:0 仍然被认为是可见的</span></div><div class="line">$(<span class="string">":hidden"</span>)</div><div class="line"><span class="comment">//选择所有隐藏的元素</span></div><div class="line"><span class="comment">//display的值是none。</span></div><div class="line"><span class="comment">//type="hidden"的表单元素。</span></div><div class="line"><span class="comment">//宽度和高度都显式设置为0。</span></div><div class="line"><span class="comment">//一个祖先元素是隐藏的，该元素是不会在页面上显示</span></div><div class="line"><span class="comment">//visibility的值是hidden</span></div><div class="line"><span class="comment">//opacity的指是0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//属性筛选选择器</span></div><div class="line">$(<span class="string">"[attribute = 'value']"</span>)</div><div class="line"><span class="comment">//选择指定属性值等于给定字符串或以该字符串为前缀（该字符串后跟一个连字符"-"）的元素</span></div><div class="line">$(<span class="string">"[attribute *= 'value']"</span>)</div><div class="line"><span class="comment">//选择指定属性具有包含一个给定的子字符串的元素。（选择给定的属性是以包含某些值得元素）</span></div><div class="line">$(<span class="string">"[attribute ~= 'value']"</span>)</div><div class="line"><span class="comment">//选择指定属性用空格分隔的值中包含一个给定值得元素。</span></div><div class="line">$(<span class="string">"[attribute = 'value']"</span>)</div><div class="line"><span class="comment">// 选择指定属性是给定值得元素</span></div><div class="line">$(<span class="string">"[attribute != 'value']"</span>)</div><div class="line"><span class="comment">//选择不存在指定属性，或者指定的属性值不等于给定值得元素</span></div><div class="line">$(<span class="string">"[attribute ^= 'value']"</span>)</div><div class="line"><span class="comment">//选择指定属性是以给定字符串开始的元素</span></div><div class="line">$(<span class="string">"[attribute $= 'value']"</span>)</div><div class="line"><span class="comment">//选择指定属性是以给定值结尾的元素。这个比较是区分大小写的</span></div><div class="line">$(<span class="string">"[attribute]"</span>)</div><div class="line"><span class="comment">//选择所有具有指定属性的元素，该属性是可以是任何值</span></div><div class="line">$(<span class="string">"[attributeFilter1][attributeFilterN]"</span>)</div><div class="line"><span class="comment">//选择匹配所有指定的属性筛选器的元素</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//子元素筛选选择器</span></div><div class="line">$(<span class="string">".fist-chill"</span>）</div><div class="line"><span class="comment">//选择所有父级元素下的第一个字元素</span></div><div class="line">$(<span class="string">".last-child"</span>)</div><div class="line"><span class="comment">//选择所要父级下的最后一个子元素</span></div><div class="line">$(<span class="string">".only-child"</span>)</div><div class="line"><span class="comment">//唯一的子元素</span></div><div class="line">$(<span class="string">".nth-child"</span>)</div><div class="line"><span class="comment">//所有父级下第n个子元素</span></div><div class="line">$(<span class="string">".nth-last-child"</span>)</div><div class="line"><span class="comment">//所有父级下倒数第n个子元素</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//表单选择器</span></div><div class="line">$(<span class="string">":input"</span>)</div><div class="line"><span class="comment">//选择所有input、textarea、select和button元素</span></div><div class="line">$(<span class="string">"input:text"</span>)</div><div class="line"><span class="comment">//匹配所有文本框</span></div><div class="line">$(<span class="string">"input:password"</span>)</div><div class="line"><span class="comment">//匹配所有密码档</span></div><div class="line">$(<span class="string">"input:radio"</span>)</div><div class="line"><span class="comment">//匹配所有单选按钮</span></div><div class="line">$(<span class="string">"input:checkbox"</span>)</div><div class="line"><span class="comment">//匹配所有复选框</span></div><div class="line">$(<span class="string">"input:submit"</span>)</div><div class="line"><span class="comment">//匹配所有提交按钮</span></div><div class="line">$(<span class="string">"input:image"</span>)</div><div class="line"><span class="comment">//匹配所有图像域</span></div><div class="line">$(<span class="string">"input:reset"</span>)</div><div class="line"><span class="comment">//匹配所有重置按钮</span></div><div class="line">$(<span class="string">"input:button"</span>)</div><div class="line"><span class="comment">//匹配所有按钮</span></div><div class="line">$(<span class="string">"input:file"</span>)</div><div class="line"><span class="comment">//匹配所有文件域</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//表单对象属性筛选选择器</span></div><div class="line">$(<span class="string">':enabled'</span>)<span class="comment">//所有可用的input</span></div><div class="line">$(<span class="string">':disabled'</span>)<span class="comment">//所有不可用的input</span></div><div class="line">$(<span class="string">':checked'</span>)<span class="comment">//所有被选中的选项框</span></div><div class="line">$(<span class="string">':selected'</span>)<span class="comment">//所有被选中的下拉框</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//特殊选择器this</span></div><div class="line">$(<span class="keyword">this</span>)</div><div class="line"><span class="comment">//$(this)代表的上下文对象是一个jquery的上下文对象，可以调用jQuery的方法和属性值。</span></div><div class="line"><span class="comment">//this，表示当前的上下文对象是一个html对象，可以调用html对象所拥有的属性和方法。</span></div></pre></td></tr></table></figure></p>
<h1 id="class-属性"><a href="#class-属性" class="headerlink" title="class 属性"></a>class 属性</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ie8</span></div><div class="line"><span class="comment">// add class</span></div><div class="line">el.className += <span class="string">' '</span> + className;</div><div class="line"></div><div class="line"><span class="comment">// has class</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">el,className</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| )'</span> + className + <span class="string">'( |$)'</span>, <span class="string">'gi'</span>).test(el.className);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// toggle class</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span>(<span class="params">el,className</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> classes = el.className.split(<span class="string">' '</span>);</div><div class="line">  <span class="keyword">var</span> existingIndex = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = classes.length; i--;) &#123;</div><div class="line">    <span class="keyword">if</span> (classes[i] === className)&#123;</div><div class="line">      existingIndex = i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (existingIndex &gt;= <span class="number">0</span>)&#123;</div><div class="line">    classes.splice(existingIndex, <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    classes.push(className);</div><div class="line">  &#125;</div><div class="line">  el.className = classes.join(<span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// remove class</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">el,className</span>)</span>&#123;</div><div class="line">  el.className = el.className.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\b)'</span> + className.split(<span class="string">' '</span>).join(<span class="string">'|'</span>) + <span class="string">'(\\b|$)'</span>, <span class="string">'gi'</span>), <span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ie 10</span></div><div class="line">el.classList.add(className); <span class="comment">// add class</span></div><div class="line">el.classList.remove(className); <span class="comment">// remove class</span></div><div class="line">el.classList.contains(className); <span class="comment">// has class</span></div><div class="line">el.classList.toggle(className); <span class="comment">// toggle class</span></div></pre></td></tr></table></figure></p>
<p>jquery:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jQuery</span></div><div class="line">$.addClass();<span class="comment">//为每个匹配的元素添加指定的样式类名</span></div><div class="line">$.hasClass();<span class="comment">//确定任何一个匹配元素是否有被分配给定的（样式）类。</span></div><div class="line">$.removeClass();<span class="comment">//移除集合中每个匹配元素上一个，多个或全部样式。</span></div><div class="line">$.toggleClass();<span class="comment">//在匹配的元素集合中的每个元素上切换属性。</span></div></pre></td></tr></table></figure></p>
<h1 id="Node-Element操作"><a href="#Node-Element操作" class="headerlink" title="Node,Element操作"></a>Node,Element操作</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建元素节点</span></div><div class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(name);</div><div class="line"></div><div class="line"><span class="comment">// 复制节点</span></div><div class="line">el.cloneNode(<span class="literal">true</span>); <span class="comment">// 默认为false(克隆节点及其后代), true(克隆节点及其属性，以及后代)</span></div><div class="line"></div><div class="line"><span class="comment">// 向节点添加最后一个子节点</span></div><div class="line">parent.appendChild(el);</div><div class="line"></div><div class="line"><span class="comment">// 在指定子节点之前插入新的子节点</span></div><div class="line">parent.insertBefore(el, parent.childNodes[<span class="number">0</span>]);</div><div class="line"></div><div class="line"><span class="comment">// insertAdjacentHTML方法</span></div><div class="line">el.insertAdjacentHTML(where, htmlString);</div><div class="line">el.insertAdjacentHTML(<span class="string">'beforeBegin'</span>, htmlString); <span class="comment">// 在该元素前插入</span></div><div class="line">el.insertAdjacentHTML(<span class="string">'afterBegin'</span>, htmlString); <span class="comment">// 在该元素第一个子元素前插入</span></div><div class="line">el.insertAdjacentHTML(<span class="string">'beforeEnd'</span>, htmlString);</div><div class="line"><span class="comment">// 在该元素最后一个子元素后面插入</span></div><div class="line">el.insertAdjacentHTML(<span class="string">'afterEnd'</span>, htmlString); <span class="comment">// 在该元素后插入</span></div><div class="line"></div><div class="line"><span class="comment">// 删除节点</span></div><div class="line">el.parentNode.removeChild(el);</div><div class="line"></div><div class="line"><span class="comment">// 兄弟节点 ie9+</span></div><div class="line"><span class="keyword">var</span> siblings = <span class="built_in">Array</span>.prototype.filter.call(el.parentNode.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> child !== el;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 下一个兄弟节点</span></div><div class="line"><span class="comment">// ie8</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextElementSibling</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">  <span class="keyword">do</span> &#123; el = el.nextSibling; &#125; <span class="keyword">while</span> ( el &amp;&amp; el.nodeType !== <span class="number">1</span> );</div><div class="line">  <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line">nextElementSibling(el);</div><div class="line"><span class="comment">// ie9+</span></div><div class="line">el.nextElementSibling;</div><div class="line"></div><div class="line"><span class="comment">// 上一个兄弟节点</span></div><div class="line"><span class="comment">// ie8</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">previousElementSibling</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    el = el.previousSibling;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> ( el &amp;&amp; el.nodeType !== <span class="number">1</span> );</div><div class="line">  <span class="keyword">return</span> el;</div><div class="line">&#125;</div><div class="line">previousElementSibling(el);</div><div class="line"><span class="comment">// ie9+</span></div><div class="line">el.previousElementSibling;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Children</span></div><div class="line"><span class="comment">// ie8</span></div><div class="line"><span class="keyword">var</span> children = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = el.children.length; i--;) &#123;</div><div class="line">  <span class="comment">// Skip comment nodes on IE8</span></div><div class="line">  <span class="keyword">if</span> (el.children[i].nodeType != <span class="number">8</span>)</div><div class="line">    children.unshift(el.children[i]);</div><div class="line">&#125;</div><div class="line"><span class="comment">// ie9+</span></div><div class="line">Element.children</div><div class="line"><span class="comment">//是一个只读属性，返回一个包含当前元素的子元素的集合</span></div><div class="line"><span class="comment">//该集合为一个即时更新的（live）HTMLCollection。</span></div><div class="line"><span class="comment">//可以使用 elementNodeReference.children[1].nodeName 来获取某个子元素的标签名称</span></div><div class="line">Element.firstElementChild</div><div class="line"><span class="comment">//返回当前元素的第一个子元素节点，如果没有子元素节点，则返回null。</span></div><div class="line">Element.lastElementChild</div><div class="line"><span class="comment">//返回当前元素的最后一个子元素节点,如果没有子元素节点,则返回null.</span></div><div class="line">Node.firstChild</div><div class="line"><span class="comment">//返回当前节点在 DOM 树中的第一个子节点, 如果没有子节点，则返回 null。</span></div><div class="line">Node.childNodes</div><div class="line"><span class="comment">//返回包含指定节点的子节点的集合，该集合为即时更新的集合（live collection）</span></div><div class="line"></div><div class="line"><span class="comment">// 父节点</span></div><div class="line">Node.parentNode</div><div class="line"><span class="comment">//返回指定的节点在DOM树中的父节点.</span></div></pre></td></tr></table></figure></p>
<p>jQuery:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建</span></div><div class="line">$(<span class="string">"HTML结构"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 复制</span></div><div class="line">.clone();<span class="comment">//.clone()方法深度 复制所有匹配的元素集合，包括所有匹配元素、匹配元素的下级元素、文字节点。</span></div><div class="line"></div><div class="line"><span class="comment">//DOM 插入现有元素内</span></div><div class="line">.append()</div><div class="line"><span class="comment">//将特定内容插入到每个匹配元素里面的最后面，作为它的最后一个子元素（last child）, (如果要作为第一个子元素 （first child）, 用.prepend()).</span></div><div class="line"><span class="comment">//appendTo()与.append()实现同样的功能，语法不同</span></div><div class="line">.prepend()</div><div class="line"><span class="comment">//将指定元素插入到匹配元素里面，作为它的第一个子元素</span></div><div class="line"><span class="comment">//.prependTo()与.prepend()实现同样的功能，语法不同</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//DOM 插入现有元素外</span></div><div class="line">.after()</div><div class="line"><span class="comment">//向元素后面添加html代码，如果元素后面有元素，则将元素后移，将html代码插入</span></div><div class="line"><span class="comment">//.insertAfter()与 .after()实现同样的功能，语法不同</span></div><div class="line"></div><div class="line">.before()</div><div class="line"><span class="comment">//在匹配元素的前面插入内容</span></div><div class="line"><span class="comment">//.insertBefore()与 .before()实现同样的功能，语法不同</span></div><div class="line"></div><div class="line"><span class="comment">//DOM 移除</span></div><div class="line">.detach()</div><div class="line"><span class="comment">//保留数据的删除操作，即从当前页面中移除该元素，但保留这个元素的内存模型对象。</span></div><div class="line">.empty()</div><div class="line"><span class="comment">//移除指定元素所有子节点，不删除本身节点</span></div><div class="line">.remove()</div><div class="line"><span class="comment">//会将元素本身以及元素内部一切包括绑定的事件以及jQuery数据删除，</span></div><div class="line"><span class="comment">//可以选择性删除指定节点通过传递参数</span></div><div class="line"></div><div class="line"><span class="comment">//兄弟元素</span></div><div class="line">.prev()</div><div class="line"><span class="comment">//紧邻的前一个同辈元素的元素集合</span></div><div class="line">.prevAll()</div><div class="line"><span class="comment">//所有前面的兄弟元素</span></div><div class="line">.siblings()</div><div class="line"><span class="comment">//获得匹配元素集合中每个元素的兄弟元素</span></div><div class="line">.next()</div><div class="line"><span class="comment">//紧邻的后面同辈元素的元素集合</span></div><div class="line">.nextAll()</div><div class="line"><span class="comment">//所有下面的同辈元素</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//Children</span></div><div class="line">.children()</div><div class="line"><span class="comment">//父子查找，查找合集中第一级子元素（仅儿子辈）</span></div><div class="line">.find()</div><div class="line"><span class="comment">//后代查找</span></div><div class="line"></div><div class="line"><span class="comment">//父元素</span></div><div class="line">.parent()</div><div class="line"><span class="comment">//查找父元素</span></div><div class="line">.parents()</div><div class="line"><span class="comment">//祖先元素</span></div><div class="line">.closest()</div><div class="line"><span class="comment">//向上查找，从元素本身开始，向上匹配，返回最先匹配的祖先元素</span></div></pre></td></tr></table></figure></p>
<h1 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取属性值</span></div><div class="line">el.getAttribute(<span class="string">'alt'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置属性值</span></div><div class="line">el.setAttribute(<span class="string">'alt'</span>, <span class="string">'图片描述'</span>);</div></pre></td></tr></table></figure></p>
<p>jQuery:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.attr()<span class="comment">//获取和设置元素属性</span></div><div class="line">.removeAttr()<span class="comment">//为匹配的元素集合中的每个元素中移除一个属性（attribute）</span></div><div class="line">.prop()</div><div class="line">.removeProp()</div><div class="line"></div><div class="line"><span class="comment">//Attribute就是dom节点自带的属性，html中常用的id、class、title、align等</span></div><div class="line"><span class="comment">//Property是这个DOM元素作为对象，其附加的内容，例如,tagName, nodeName, nodeType,, defaultChecked, 和 defaultSelected 使用.prop()方法进行取值或赋值等</span></div><div class="line"><span class="comment">//获取Attribute就需要用attr，获取Property就需要用prop</span></div></pre></td></tr></table></figure></p>
<h1 id="内容操作"><a href="#内容操作" class="headerlink" title="内容操作"></a>内容操作</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取元素内容</span></div><div class="line">el.innerHTML</div><div class="line"><span class="comment">// 设置元素内容</span></div><div class="line">el.innerHTML = string</div><div class="line"><span class="comment">// 获取元素内容(包含元素自身)</span></div><div class="line">el.outerHTML</div><div class="line"><span class="comment">// 设置元素内容(包含元素自身)</span></div><div class="line">el.outerHTML = string</div><div class="line"></div><div class="line"><span class="comment">// 获取文本内容</span></div><div class="line"><span class="comment">// ie8</span></div><div class="line">el.innerText</div><div class="line"><span class="comment">// ie9+</span></div><div class="line">el.textContent</div><div class="line"><span class="comment">// 设置文本内容</span></div><div class="line"><span class="comment">// ie8</span></div><div class="line">el.innerText = string</div><div class="line"><span class="comment">// ie9+</span></div><div class="line">el.textContent = string</div></pre></td></tr></table></figure></p>
<p>jquery:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.html()</div><div class="line"><span class="comment">//获取集合中第一个匹配元素的HTML内容 设置每一个匹配元素的html内容。对应DOM的innerHTML属性</span></div><div class="line">.text()</div><div class="line"><span class="comment">//得到匹配元素集合中每个元素的文本内容结合，包括他们的后代，或设置匹配元素集合中每个元素的文本内容为指定的文本内容。返回一个字符串，包含所有匹配元素的合并文本。</span></div><div class="line">.val()</div><div class="line"><span class="comment">//用于处理表单元素的值，比如 input, select 和 textarea。</span></div></pre></td></tr></table></figure></p>
<h1 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取css样式</span></div><div class="line"><span class="comment">// ie8</span></div><div class="line">el.currentStyle[attrName]</div><div class="line"><span class="comment">// ie9+</span></div><div class="line"><span class="built_in">window</span>.getComputedStyle(el)[attrName]</div><div class="line"><span class="comment">// 伪类</span></div><div class="line"><span class="built_in">window</span>.getComputedStyle(el , <span class="string">":after"</span>)[attrName];</div><div class="line"></div><div class="line"><span class="comment">// 设置CSS样式</span></div><div class="line">el.style.display = <span class="string">'none'</span>;</div></pre></td></tr></table></figure>
<p>jQuery:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.css()</div><div class="line">//获取元素样式属性的计算值或者设置元素的CSS属性</div></pre></td></tr></table></figure></p>
<h1 id="位置大小"><a href="#位置大小" class="headerlink" title="位置大小"></a>位置大小</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// getBoundingClientRect返回一个对象，包含top,left,right,bottom,width,height</span></div><div class="line"><span class="comment">// width、height 元素自身宽高</span></div><div class="line"><span class="comment">// top 元素上外边界距窗口最上面的距离</span></div><div class="line"><span class="comment">// right 元素右外边界距窗口最上面的距离</span></div><div class="line"><span class="comment">// bottom 元素下外边界距窗口最上面的距离</span></div><div class="line"><span class="comment">// left 元素左外边界距窗口最上面的距离</span></div><div class="line"><span class="comment">// width 元素自身宽(包含border,padding)</span></div><div class="line"><span class="comment">// height 元素自身高(包含border,padding)</span></div><div class="line"></div><div class="line"><span class="comment">// 元素在页面上的偏移量</span></div><div class="line"><span class="keyword">var</span> rect = el.getBoundingClientRect()</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">  top: rect.top + <span class="built_in">document</span>.body.scrollTop,</div><div class="line">  left: rect.left + <span class="built_in">document</span>.body.scrollLeft</div><div class="line">&#125;</div><div class="line"><span class="comment">//getViewPortPos：获取元素相对于可视窗口（ViewPort，不包括滚动条）的位置</span></div><div class="line">getViewPortPos : <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> rect = element.getBoundingClientRect();</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                x : rect.left,</div><div class="line">                y : rect.top</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"><span class="comment">// 元素自身宽(包含border,padding)</span></div><div class="line">el.offsetWidth</div><div class="line"><span class="comment">// 元素自身高(包含border,padding)</span></div><div class="line">el.offsetHeight</div><div class="line"><span class="comment">// 元素的左外边框至包含元素的左内边框之间的像素距离</span></div><div class="line">el.offsetLeft</div><div class="line"><span class="comment">// 元素的上外边框至包含元素的上内边框之间的像素距离</span></div><div class="line">el.offsetTop</div><div class="line"><span class="comment">//getOffsetPos：获取文档相对于父容器位置</span></div><div class="line">getOffsetPos:<span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span>&#123;</div><div class="line">                x:element.offsetLeft,</div><div class="line">                y:elementoffsetTop</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//通常认为 &lt;html&gt; 元素是在 Web 浏览器的视口中滚动的元素（IE6 之前版本运行在混杂模式下时是 &lt;body&gt; 元素）</span></div><div class="line"><span class="comment">//因此，带有垂直滚动条的页面总高度就是 document.documentElement.scrollHeight</span></div><div class="line"><span class="comment">// 在没有滚动条的情况下，元素内容的总高度</span></div><div class="line">scrollHeight</div><div class="line"><span class="comment">// 在没有滚动条的情况下，元素内容的总宽度</span></div><div class="line">scrollWidth</div><div class="line"><span class="comment">// 被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置</span></div><div class="line">scrollLeft</div><div class="line"><span class="comment">// 被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置</span></div><div class="line">scrollTop</div><div class="line"><span class="comment">//getScrollPos:获取元素滚动条位置</span></div><div class="line">getScrollPos : <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> e = element</div><div class="line">                    || (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span> ? <span class="built_in">document</span>.documentElement</div><div class="line">                            : <span class="built_in">document</span>.body);</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                x : e.scrollTop,</div><div class="line">                y : e.scrollLeft</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"><span class="comment">// 视口大小</span></div><div class="line"><span class="comment">// ie9+</span></div><div class="line"><span class="keyword">var</span> pageWidth = <span class="built_in">window</span>.innerWidth,</div><div class="line">    pageHeight = <span class="built_in">window</span>.innerHeight;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> pageWidth != <span class="string">"number"</span>)&#123;</div><div class="line">  <span class="comment">// ie8</span></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>)&#123;</div><div class="line">    pageWidth = <span class="built_in">document</span>.documentElement.clientWidth;</div><div class="line">    pageHeight = <span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// ie6混杂模式</span></div><div class="line">    pageWidth = <span class="built_in">document</span>.body.clientWidth;</div><div class="line">    pageHeight = <span class="built_in">document</span>.body.clientHeight;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//getAbsolutePos：获取元素相对于文档（包含滚动条）位置</span></div><div class="line">getAbsolutePos : <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> rect=element.getBoundingClientRect();</div><div class="line">            <span class="keyword">var</span> doc = <span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span> ? <span class="built_in">document</span>.documentElement</div><div class="line">                    : <span class="built_in">document</span>.body;</div><div class="line">            <span class="keyword">return</span>&#123;</div><div class="line">                x:rect.left+<span class="built_in">Math</span>.max(doc.scrollLet,doc.clientLeft),</div><div class="line">                y:rect.top+<span class="built_in">Math</span>.max(doc.scrollTop,doc.clientTop)</div><div class="line">            &#125;;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>jQuery:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.height()</div><div class="line"><span class="comment">//.height()返回一个没有单位的数值，当一个元素的高度需要数学计算的时候推荐使用.height() 方法。总是返回内容高度,不管CSS box-sizing属性值。</span></div><div class="line"><span class="comment">//.height('value')设置的容器宽度是根据CSS box-sizing属性来定的, 将这个属性值改成border-box，将造成这个函数改变这个容器的outerHeight，而不是原来的内容高度。</span></div><div class="line">.width()</div><div class="line">.innerHeight()</div><div class="line"><span class="comment">//为匹配的元素集合中获取第一个元素的当前计算高度值,包括padding，但是不包括border。</span></div><div class="line">.innerWidth()</div><div class="line">.outerHeight()</div><div class="line"><span class="comment">//在.outerHeight()计算中总是包含padding-top ,padding-bottom 和 border-top，border-bottom ；如果includeMargin参数是true，那么margin (top 和 bottom)也会被包含。</span></div><div class="line">.outerWidth()</div><div class="line">.position()</div><div class="line"><span class="comment">//获取匹配元素中第一个元素的当前坐标，相对于offset parent的坐标。( 译者注：offset parent指离该元素最近的而且被定位过的祖先元素 ),.position()返回一个包含 top 和 left属性的对象.</span></div><div class="line">.scrollLeft()</div><div class="line"><span class="comment">//获取匹配的元素集合中第一个元素的当前水平滚动条的位置或设置每个匹配元素的水平滚动条位置。</span></div><div class="line">.scrollTop()</div><div class="line"><span class="comment">//获取匹配的元素集合中第一个元素的当前垂直滚动条的位置或设置每个匹配元素的垂直滚动条位置</span></div><div class="line">.offset()</div><div class="line"><span class="comment">//在匹配的元素集合中，获取的第一个元素的当前坐标，或设置每一个元素的坐标，坐标相对于文档。</span></div></pre></td></tr></table></figure></p>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>JavaScript:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">// 事件触发</div><div class="line">if (document.createEvent) &#123;</div><div class="line">  // ie9+</div><div class="line">  var event = document.createEvent(&apos;HTMLEvents&apos;);</div><div class="line">  event.initEvent(&apos;change&apos;, true, false);</div><div class="line">  el.dispatchEvent(event);</div><div class="line">&#125; else &#123;</div><div class="line">  // ie8</div><div class="line">  el.fireEvent(&apos;onchange&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// event对象</div><div class="line">var event = window.event||event;</div><div class="line"></div><div class="line">// 事件的目标节点</div><div class="line">var target = event.target || event.srcElement;</div><div class="line"></div><div class="line">// 事件代理</div><div class="line">// W3C标准绑定方法</div><div class="line">ul.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">  if (event.target.tagName.toLowerCase() === &apos;li&apos;) &#123;</div><div class="line">    console.log(event.target.innerHTML)</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">//IE事件注册方法</div><div class="line">el.attachEvent(&apos;onclick&apos;,function()&#123;···&#125;)；</div><div class="line">//统一绑定方法</div><div class="line">funcution addEvent(el,event,callbackfunction)&#123;</div><div class="line">  if(el.addEventListener)&#123;</div><div class="line">    el.addEventListener(event,callbackFunction,false);</div><div class="line">  &#125;else if(el.attachEvent)&#123;</div><div class="line">    el.attachEvent(&apos;on&apos;+event,callbackFunction);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jQuery:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//事件绑定</span></div><div class="line">$(<span class="string">"elem"</span>).on(<span class="string">"mousedown mouseup"</span>,fn)</div><div class="line"><span class="comment">//解除事件绑定</span></div><div class="line">$(<span class="string">"elem"</span>).off(<span class="string">"mousedown"</span>)</div><div class="line"><span class="comment">//事件对象event</span></div><div class="line"><span class="comment">//事件对象是用来记录一些事件发生时的相关信息的对象。事件对象只有事件发生时才会产生，并且只能是事件处理函数内部访问，在所有事件处理函数运行结束后，事件对象就被销毁</span></div><div class="line">event.target</div><div class="line"><span class="comment">//event.target代表当前触发事件的元素，可以通过当前元素对象的一系列属性来判断是不是我们想要的元素</span></div><div class="line">event.type</div><div class="line"><span class="comment">//获取事件的类型</span></div><div class="line">event.pageX 和 event.pageY</div><div class="line"><span class="comment">//获取鼠标当前相对于页面的坐标</span></div><div class="line">event.preventDefault()</div><div class="line"><span class="comment">//阻止默认行为</span></div><div class="line">event.stopPropagation()</div><div class="line"><span class="comment">//阻止事件冒泡</span></div><div class="line">event.which</div><div class="line"><span class="comment">//获取在鼠标单击时，单击的是鼠标的哪个键</span></div><div class="line">event.currentTarget</div><div class="line"><span class="comment">// 在事件冒泡过程中的当前DOM元素</span></div><div class="line"></div><div class="line"><span class="comment">//jQuery自定义事件</span></div><div class="line"><span class="comment">//自定义事件对象，是jQuery模拟原生实现的</span></div><div class="line"><span class="comment">//自定义事件可以传递参数</span></div><div class="line"></div><div class="line">trigger();</div><div class="line"><span class="comment">//根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为，trigger除了能够触发浏览器事件，同时还支持自定义事件，并且自定义事件还支持传递参数。</span></div><div class="line">.triggerHandler()</div><div class="line"><span class="comment">//.trigger() 相似，不冒泡，仅影响第一个匹配的元素，不会触发事件的默认行为，返回最后一个处理的事件的返回值。如果没有触发任何事件，会返回 undefined。</span></div></pre></td></tr></table></figure></p>
<h1 id="DOM加载完毕"><a href="#DOM加载完毕" class="headerlink" title="DOM加载完毕"></a>DOM加载完毕</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState != <span class="string">'loading'</span>)&#123;</div><div class="line">    <span class="comment">// ie9+</span></div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, fn);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// ie8</span></div><div class="line">    <span class="built_in">document</span>.attachEvent(<span class="string">'onreadystatechange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="built_in">document</span>.readyState != <span class="string">'loading'</span>)&#123;</div><div class="line">        fn();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jQuery:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.ready()</div><div class="line"><span class="comment">//当DOM准备就绪时，指定一个函数来执行。</span></div><div class="line">.load()</div><div class="line"><span class="comment">//为 JavaScript 的 "load" 事件绑定一个处理函数,所有元素被加载之后才能触发该事件</span></div><div class="line">.unload()</div><div class="line"><span class="comment">//为 JavaScript 的 "unload" 事件绑定一个处理函数</span></div></pre></td></tr></table></figure></p>
<h1 id="绑定上下文"><a href="#绑定上下文" class="headerlink" title="绑定上下文"></a>绑定上下文</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ie8</span></div><div class="line">fn.apply(context, <span class="built_in">arguments</span>);</div><div class="line"><span class="comment">// ie9+</span></div><div class="line">fn.bind(context);</div></pre></td></tr></table></figure></p>
<h1 id="去除空格"><a href="#去除空格" class="headerlink" title="去除空格"></a>去除空格</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ie8</span></div><div class="line">string.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>);</div><div class="line"><span class="comment">// ie9+</span></div><div class="line">string.trim();</div></pre></td></tr></table></figure></p>
<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// GET</span></div><div class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">request.open(<span class="string">'GET'</span>, <span class="string">'user.php?fname=Bill&amp;lname=Gates'</span>, <span class="literal">true</span>); <span class="comment">// false（同步）</span></div><div class="line">request.send();</div><div class="line"></div><div class="line"><span class="comment">// ie8</span></div><div class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status &gt;= <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.status &lt; <span class="number">400</span>) &#123;</div><div class="line">      <span class="comment">// Success!</span></div><div class="line">      <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 错误</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// ie9+</span></div><div class="line">request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">400</span>) &#123;</div><div class="line">    <span class="comment">// Success!</span></div><div class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(request.responseText);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 服务器返回出错</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 连接错误</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// POST</span></div><div class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">request.open(<span class="string">'POST'</span>, <span class="string">'user.php'</span>, <span class="literal">true</span>); <span class="comment">// false（同步）</span></div><div class="line">request.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">request.send(dataString);T</div></pre></td></tr></table></figure></p>
<p>jquery:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  type: <span class="string">"POST"</span>,</div><div class="line">  url: <span class="string">"some.php"</span>,</div><div class="line">  data: &#123; name: <span class="string">"John"</span>, location: <span class="string">"Boston"</span> &#125;</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> msg </span>) </span>&#123;</div><div class="line">  alert( <span class="string">"Data Saved: "</span> + msg );</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="JSON处理"><a href="#JSON处理" class="headerlink" title="JSON处理"></a>JSON处理</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">JSON</span>.parse(string);</div><div class="line"><span class="built_in">JSON</span>.String(<span class="built_in">Object</span>)</div></pre></td></tr></table></figure></p>
<h1 id="节点遍历"><a href="#节点遍历" class="headerlink" title="节点遍历"></a>节点遍历</h1><p>JavaScript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params"> nodeList, callback </span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">Array</span>.prototype.forEach)&#123;</div><div class="line">    <span class="comment">// ie9+</span></div><div class="line">    <span class="built_in">Array</span>.prototype.forEach.call( nodeList, callback );</div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// ie8</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodeList.length; i++)&#123;</div><div class="line">      callback(nodeList[i], i);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">forEach(<span class="built_in">document</span>.querySelectorAll(selector),<span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>jQuery:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.each()</div><div class="line"><span class="comment">//for循环的迭代器，它会迭代jQuery对象合集中的每一个DOM元素。每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数）</span></div><div class="line"></div><div class="line">.add()<span class="comment">//添加元素到匹配的元素集合</span></div></pre></td></tr></table></figure></p>
<p>参考链接：<br><a href="https://segmentfault.com/a/1190000002650240" target="_blank" rel="external">JavaScript操作DOM的那些坑</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;元素查找&quot;&gt;&lt;a href=&quot;#元素查找&quot; class=&quot;headerlink&quot; title=&quot;元素查找&quot;&gt;&lt;/a&gt;元素查找&lt;/h1&gt;&lt;p&gt;JavaScript:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Node&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(id); &lt;span class=&quot;comment&quot;&gt;// document.getElementById(&#39;test&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(selectors);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//该方法接收一个css选择符，返回与该模式匹配的第一个元素，如果没有，返回null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Document类型调用会在文档元素内容类查找，Element类型调用会该元素后代范围内查找&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// document.querySelector(&#39;#test div&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.doctype；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//doctype 是一个只读属性.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回当前文档关联的文档类型定义(DTD).&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果当前文档没有DTD,则该属性返回null.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在HTML文档中,如果文档有DTD,则该属性等价于document.firstChild.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//document.documentElement 是一个只读属性，返回文档对象（document）的根元素（例如，HTML文档的 &amp;lt;html&amp;gt; 元素）。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.head&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回当前文档中的 &amp;lt;head&amp;gt; 元素。如果有多个 &amp;lt;head&amp;gt; 元素，则返回第一个。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//document.head 是个只读属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.title&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取或设置文档的标题。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//title 是一个包含 document 标题的字符串。如果通过设置 document.title 将标题覆盖，则返回覆盖后的值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回当前文档中的&amp;lt;body&amp;gt;元素或者&amp;lt;frameset&amp;gt;元素.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//该属性是可写的,且为该属性赋的值必须是一个&amp;lt;body&amp;gt;元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NodeList&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByClassName(names) &lt;span class=&quot;comment&quot;&gt;// document.getElementsByClassName(&#39;test&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByName(name) &lt;span class=&quot;comment&quot;&gt;// document.getElementsByName(&#39;demo&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(name) &lt;span class=&quot;comment&quot;&gt;// document.getElementsByTagName(&#39;div&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagNameNS(namespace, name) &lt;span class=&quot;comment&quot;&gt;// document.getElementsByTagNameNS(&#39;http://www.w3.org/1999/xhtml&#39;, &#39;div&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(selectors) &lt;span class=&quot;comment&quot;&gt;// document.querySelectorAll(&#39;#test div&#39;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.links&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//links 属性返回一个包含文档中所有具有 href 属性值的 &amp;lt;area&amp;gt; 元素 &amp;lt;a&amp;gt; 元素的集合&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.scripts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回一个HTMLCollection对象,包含了当前文档中所有&amp;lt;script&amp;gt;元素的集合.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//可以像使用数组一样通过索引来获取其中包含的&amp;lt;script&amp;gt;元素.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.images&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//document.images 返回当前文档中所有 image 元素的集合.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.embeds&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回一个HTMLCollection对象,包含了嵌入到当前文档中的所有的OBJECT对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.forms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回一个包含了当前文档中的所有 form 元素的集合 (一个HTMLCollection对象)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//var selectForm = document.forms[index];&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//var selectFormElement = document.forms[index].elements[index];&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记之This</title>
    <link href="http://yoursite.com/2016/08/22/javascript-1/"/>
    <id>http://yoursite.com/2016/08/22/javascript-1/</id>
    <published>2016-08-22T09:48:08.000Z</published>
    <updated>2016-10-10T01:13:57.280Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于window，当函数被作为某个对象方法调用时，this等于那个对象。匿名函数的执行环境具有全局性，因此this指向window。</p>
<a id="more"></a>
<h1 id="全局环境"><a href="#全局环境" class="headerlink" title="全局环境"></a>全局环境</h1><p>在全局环境中（在任何函数体外部），this指代全局对象，无论是否在严格模式下。</p>
<h1 id="函数环境"><a href="#函数环境" class="headerlink" title="函数环境"></a>函数环境</h1><p>在函数内部，this的值取决与函数是如何被调用的。</p>
<h2 id="直接调用"><a href="#直接调用" class="headerlink" title="直接调用"></a>直接调用</h2><ul>
<li>非严格模式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line">f1() === <span class="built_in">window</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>f1()是在全局上下文调用的，this 的值总是一个对象且默认为全局对象。</p>
<ul>
<li>严格模式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">  "use strict"</span>; <span class="comment">// 这里是严格模式</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f2() === <span class="literal">undefined</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>在严格模式下，this 是在进入运行环境时设置的。若没有定义，this的值将维持undefined状态。</p>
<h2 id="对象方法中"><a href="#对象方法中" class="headerlink" title="对象方法中"></a>对象方法中</h2><p>当以对象方法的方式调用时，this是调用该函数的对象，this的绑定只受最靠近的成员引用的影响。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;prop: <span class="number">37</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">independent</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.prop;</div><div class="line">&#125;</div><div class="line"></div><div class="line">o.b = &#123;</div><div class="line">  g: independent,</div><div class="line">  prop: <span class="number">42</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(o.b.g()); <span class="comment">// logs 42</span></div></pre></td></tr></table></figure></p>
<p>在原型链上，this指向是调用这个方法的对象，表现的好像这个方法存在于这个对象上一样。</p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>this与即将被创建的新对象绑定。<br>当构造器返回的默认值是一个this引用的对象时，手动的设置了返回对象，与this绑定的默认对象被取消，如果返回值不是一个对象，返回this。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.me = <span class="string">"Kong"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Hello1();</div><div class="line"><span class="built_in">console</span>.log(f1.me); <span class="comment">//Kong</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.he = <span class="string">"Wang"</span>;</div><div class="line">  <span class="keyword">return</span> &#123;she:<span class="string">"Liu"</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> f2 = <span class="keyword">new</span> Hello2();</div><div class="line"><span class="built_in">console</span>.log(f2.she); <span class="comment">//Liu</span></div><div class="line"><span class="built_in">console</span>.log(f2.he); <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call(),apply()"></a>call(),apply()</h2><p>this绑定到一个指定的对象，即传递给call(),apply()的第一个参数，如何这个参数不是对象，那么JavaScript 将会尝试使用内部 ToObject 操作将其转换为对象。</p>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h2><p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">Function.prototype.bind</a><br>调用f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数，无论这个函数是如何被调用的。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>下面看一个例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'window'</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name :<span class="string">'object'</span>,</div><div class="line">  getName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">alert(obj.getName());<span class="comment">//object</span></div></pre></td></tr></table></figure></p>
<p>不用闭包的情况下，this值为调用该方法的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'window'</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name :<span class="string">'object'</span>,</div><div class="line">  getName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">alert(obj.getName()());<span class="comment">//window</span></div></pre></td></tr></table></figure></p>
<p>我们编写一个闭包，这时this指向了全局对象。每个函数在调用时都会自动获取两个变量：this和arguments,内部函数在搜索这个变量时，只会搜到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量，又因为前面说过匿名函数的执行环境具有全局性，其this值指向window。所以就有了上面的结果，但是，我们可以把外部作用域的this保存到内部函数可以访问到的变量里，就可以让内部函数访问this了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'window'</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name :<span class="string">'object'</span>,</div><div class="line">  getName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that =<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> that.name;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">alert(obj.getName()());<span class="comment">//object</span></div></pre></td></tr></table></figure></p>
<h2 id="DOM事件处理函数"><a href="#DOM事件处理函数" class="headerlink" title="DOM事件处理函数"></a>DOM事件处理函数</h2><p>当函数被用作事件处理函数时，它的this指向触发事件的元素;<br>当代码被内联处理函数调用时，它的this指向监听器所在的DOM元素。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于window，当函数被作为某个对象方法调用时，this等于那个对象。匿名函数的执行环境具有全局性，因此this指向window。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计学习笔记（一）创建对象</title>
    <link href="http://yoursite.com/2016/08/22/javascript-0/"/>
    <id>http://yoursite.com/2016/08/22/javascript-0/</id>
    <published>2016-08-22T00:31:08.000Z</published>
    <updated>2016-10-09T14:53:34.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>可以使用构造函数Object或对象字面量创建单个对象，但是如果使用同一接口创建很多对象会产生大量重复代码。解决办法如下：用函数来封装以特定接口创建对象的细节。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = name;</div><div class="line">    o.age=age;</div><div class="line">    o.job=job;</div><div class="line">    o.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1=createPerson(<span class="string">"Nicholas"</span>,<span class="number">29</span>,<span class="string">"software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2=createPerson(<span class="string">"Grey"</span>,<span class="number">24</span>,<span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure>
<p>解决了多个相似对象的问题，没有解决对象识别问题。</p>
<h1 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h1><p>创建自定义的构造函数，从而定义自定义对象类型的属性和方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="keyword">this</span>.age=age;</div><div class="line">    <span class="keyword">this</span>.job=job;</div><div class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nocholas"</span>,<span class="number">29</span>,<span class="string">"software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Grey"</span>,<span class="number">24</span>,<span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure></p>
<p>Person()与createPerson()不同之处：</p>
<ul>
<li>没有显示创建对象</li>
<li>直接将属性方法赋给this对象</li>
<li>没有return</li>
</ul>
<p>要创建Person的实例，有以下步骤：</p>
<ol>
<li>创建一个新对象</li>
<li>将构造函数作用域赋给新对象（this指向新对象）</li>
<li>执行构造函数中的代码(为这个新对象添加属性)</li>
<li>返回新对象</li>
</ol>
<p>创建的person1和person2实例都继承其原型有一个constructor属性，该属性指向Person。而constructor属性最初是用来表示对象类型的，这样就解决了工厂模式无法识别对象类型的问题。<br>构造函数模式也有缺点，每个方法都要在每个实例上重新创造一遍，而不同实例上的同名函数是不相等的。如何实现不同实例共享属性和方法呢，下面原型模式解决了这个问题。</p>
<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向原型对象。原型对象的用途是包含可以由特定类型的所有实例共享的属性和方法。在默认情况下，每个原型对象都有一个constructor（构造函数）属性，这个属性也是一个指针，指向prototype属性所在函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">    Person.prototype.name=<span class="string">"Nicola"</span>;</div><div class="line">    Person.prototype.age=<span class="number">23</span>;</div><div class="line">    Person.prototype.job=<span class="string">"Engineer"</span>;</div><div class="line">    Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person();</div><div class="line">person1.sayName();<span class="comment">//"Nicola"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> person2=<span class="keyword">new</span> Person();</div><div class="line">person2.sayName();<span class="comment">//"Nicola"</span></div></pre></td></tr></table></figure></p>
<p>当调用构造函数创建一个实例后，该实例的内部将包含一个指针[[prototype]]指向原型对象。原型对象<em>最初</em>只包含constructor属性，其他的方法是从Object继承而来。<br><img src="http://i1.buimg.com/567571/b30cde583c99e6b5.jpg" alt=""><br>[[prototype]]为内部属性，无法访问到。但是有两个方法：<br>1.isPrototypeOf()确定对象之间是否存在这种不正当关系。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(Person.prototype.isPrototypeOf(person1));<span class="comment">//true</span></div><div class="line">alert(Person.prototype.isPrototypeOf(person2));<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>2.Object.getPrototypeOf()获取一个对象的原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(<span class="built_in">Object</span>.getPrototypeOf(person1)==Person.prototype);<span class="comment">//true</span></div><div class="line">alert(<span class="built_in">Object</span>.getPrototypeOf(person1).name);<span class="comment">//"Nicola"</span></div></pre></td></tr></table></figure></p>
<p>每当代码读取某个对象的属性时，都会在<em>原型链</em>上搜索，目标是具有给定名字的属性。原型对象中的constructor属性也是实例共享的，可以通过对象实例访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(person1.constructor==Person);<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中的同名属性，这样就阻止我们访问原型对象中的同名属性，但不会修改那个属性，通过delet操作可完全删除实例属性，可重新对原型对象的访问。<br>hasOwnProperty():检测一个属性是否存在于实例中，继承自Object。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">person1.name=<span class="string">"Grey"</span>;</div><div class="line">alert(person1.name);<span class="comment">//"Grey"---来自实例</span></div><div class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//true</span></div><div class="line">alert(person2.name);<span class="comment">//"Nichola"---来自原型</span></div><div class="line">alert(person2.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>Object.getOwnPropertyDescriptor():返回指定对象上一个<em>实例属性</em>对应的属性描述符,不能获取原型对象上的属性描述符。</p>
<h2 id="in操作符"><a href="#in操作符" class="headerlink" title="in操作符"></a>in操作符</h2><p>in操作符只要通过对象能够访问到属性，包括原型链上的，就会返回true。hasOwnProperty()只在属性存在于实例中才会返回true。结合使用可以判断原型链上的属性。<br>1.for-in 循环遍历<br>返回所有能通过对象访问的可枚举的属性，实例属性加原型属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">    Person.prototype.name=<span class="string">"Nicola"</span>;</div><div class="line">    Person.prototype.age=<span class="number">23</span>;</div><div class="line">    Person.prototype.job=<span class="string">"Engineer"</span>;</div><div class="line">    Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> person1)&#123;</div><div class="line">    <span class="keyword">if</span> (prop==<span class="string">"name"</span>)</div><div class="line">    alert(<span class="string">"found!"</span>)</div><div class="line">&#125;;<span class="comment">//"found!"</span></div><div class="line"><span class="built_in">console</span>.log(prop);<span class="comment">//"sayName"</span></div></pre></td></tr></table></figure></p>
<p>每个不同的属性，语句都会被执行一次。每次循环，一个不同的属性名将会赋予 prop,最后prop只存有最有一个迭代的属性名。<br>2.Object.keys()<br>该方法会返回一个由给定对象的所有可枚举<em>实例属性</em>（不包括原形链上继承来的书香）的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">    Person.prototype.name=<span class="string">"Nicola"</span>;</div><div class="line">    Person.prototype.age=<span class="number">23</span>;</div><div class="line">    Person.prototype.job=<span class="string">"Engineer"</span>;</div><div class="line">    Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person();</div><div class="line">person1.name=<span class="string">"Rob"</span>;</div><div class="line">person1.age=<span class="number">22</span>;</div><div class="line"><span class="keyword">var</span> person1keys=object.keys(person1);</div><div class="line">alert(person1keys);<span class="comment">//"name,age"</span></div></pre></td></tr></table></figure></p>
<p>3.Object.getOwnPropertyNames()<br>该方法返回一个由指定对象的所有<em>实例属性</em>的属性名（包括不可枚举属性）组成的数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">    Person.prototype.name=<span class="string">"Nicola"</span>;</div><div class="line">    Person.prototype.age=<span class="number">23</span>;</div><div class="line">    Person.prototype.job=<span class="string">"Engineer"</span>;</div><div class="line">    Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person();</div><div class="line">person1.name=<span class="string">"Rob"</span>;</div><div class="line">person1.age=<span class="number">22</span>;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person1, <span class="string">"key"</span>, &#123;</div><div class="line">  enumerable: <span class="literal">false</span>,</div><div class="line">&#125;);<span class="comment">//属性key不可枚举</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(person1).sort());<span class="comment">//["age", "key", "name"]</span></div></pre></td></tr></table></figure></p>
<h2 id="重写原型对象"><a href="#重写原型对象" class="headerlink" title="重写原型对象"></a>重写原型对象</h2><p>用包含所有属性的对象字面量重写原型对象，这样更简便一些，但是会断开了现有原型与任何之前已经存在的对象实例之间的联系，他们引用的仍然是最初的原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"> <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"> Person.prototype=&#123;</div><div class="line">    <span class="keyword">constructor</span>:Person,</div><div class="line">    name:"Nicola",</div><div class="line">    age:23,</div><div class="line">    job:"Engineer",</div><div class="line">    sayName:function()&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">person1.sayName();<span class="comment">//TypeError: person1.sayName is not a function</span></div></pre></td></tr></table></figure></p>
<p>重写原型对象之后的关系<br><img src="http://i4.buimg.com/567571/c2342edc484af3ef.jpg" alt=""></p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1.由于不向构造函数传参，所有实例在默认情况下都会获得相同的属性值。<br>2.共享引用类型值得属性，牵一发动全身不是我们想要的，我们希望每个实例有属于自己的全部属性，改变其中一个的属性，不会影响其他。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"> Person.prototype=&#123;</div><div class="line">    <span class="keyword">constructor</span>:Person,</div><div class="line">    name:"Nicola",</div><div class="line">    age:23,</div><div class="line">    job:"Engineer",</div><div class="line">    friends:[A,B],</div><div class="line">    sayName:function()&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">"C"</span>);</div><div class="line"></div><div class="line">alert(person1.friends);<span class="comment">//"A,B,C"</span></div><div class="line">alert(person2.friends);<span class="comment">//"A,B,C"</span></div></pre></td></tr></table></figure></p>
<p>给person1添加一个朋友C，由于大家引用一个数组，person2也被动的添加了一个朋友C,这是大家不希望看到的，每个实例都应该有自己的隐私。</p>
<h1 id="组合使用构造函数和原型模式"><a href="#组合使用构造函数和原型模式" class="headerlink" title="组合使用构造函数和原型模式"></a>组合使用构造函数和原型模式</h1><p>这种方式就解决了大每个实例既想要有个对象类型，有共同的属性和方法，也不出卖隐私。构造函数定义实例属性。原型对象定义共享的属性和方法。每个实例有自己的一份实例属性副本，又共享着对方法的引用。这是一种最常见的方式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="keyword">this</span>.age=age;</div><div class="line">    <span class="keyword">this</span>.job=job;</div><div class="line">    <span class="keyword">this</span>.friends=[<span class="string">"A"</span>,<span class="string">"B"</span>];</div><div class="line">&#125;</div><div class="line">Person.prototype=&#123;</div><div class="line">    <span class="keyword">constructor</span>:Person,</div><div class="line">    sayName: function()&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1=<span class="keyword">new</span> Person(<span class="string">"Nichola"</span>,<span class="number">29</span>,<span class="string">"Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2=<span class="keyword">new</span> Person(<span class="string">"Grey"</span>,<span class="number">23</span>,<span class="string">"Doctor"</span>);</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">"C"</span>);</div><div class="line">alert(person1.friends);<span class="comment">//"A,B,C"</span></div><div class="line">alert(person2.friends);<span class="comment">//"A,B"</span></div><div class="line">alert(person1.sayName()==person2.sayName());<span class="comment">//TRUE</span></div></pre></td></tr></table></figure></p>
<h1 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h1><p>动态原型是指视情况而定使用原型模式。把所有信息封装在构造函数之中，在构造函数中初始化原型（在必要情况下），这样就可以同时使用构造函数和原型的优点。通过检查某个应该存在的方法是否有效，来决定是否初始化原型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">    <span class="keyword">this</span>.age=age;</div><div class="line">    <span class="keyword">this</span>.job=job;</div><div class="line">    <span class="comment">//方法</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName !=<span class="string">"function"</span>) &#123;</div><div class="line">        Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>.name);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nichola"</span>,<span class="number">29</span>,<span class="string">"Engineer"</span>);</div><div class="line">person1.sayName();<span class="comment">//"Nichola"</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h1&gt;&lt;p&gt;可以使用构造函数Object或对象字面量创建单个对象，但是如果使用同一接口创建很多对象会产生大量重复代码。解决办法如下：用函数来封装以特定接口创建对象的细节。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记之闭包</title>
    <link href="http://yoursite.com/2016/08/17/javascript-2/"/>
    <id>http://yoursite.com/2016/08/17/javascript-2/</id>
    <published>2016-08-17T09:30:08.000Z</published>
    <updated>2016-10-10T01:14:01.530Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 一个闭包就是一个函数和被创建的函数中的作用域对象的组合。–MDN</p>
</blockquote>
<a id="more"></a>
<h1 id="执行环境及作用域链"><a href="#执行环境及作用域链" class="headerlink" title="执行环境及作用域链"></a>执行环境及作用域链</h1><p><em>执行环境</em>（execution context）定义了变量或函数有权访问的其他数据，决定了它们各自的行为。这个说法好抽象。每个执行环境都有一个与之关联的 <em>变量对象</em>(variable object)，环境中定义的所有变量和函数都保存在这个对象中。如果这个环境是函数，则将其 <em>活动对象</em>(activation object)作为变量对象。活动对象最初只包含一个arguments对象。<br>每个函数都有自己的执行环境。当执行流进入一个函数时，函数的执行环境就会被推入一个环境栈中。<br>作用域链创建过程：</p>
<ol>
<li>创建函数同时，创建一个预先包含全局变量对象的作用域链，这个会保存在内部的[[Scope]]属性中。</li>
<li>当调用函数时，会为函数创建一个执行环境。</li>
<li>通过复制函数的[[Scope]]属性中的对象构建起执行环境的作用域链。</li>
<li>活动对象被创建并推入执行环境作用域链前端。</li>
</ol>
<p>作用域链本质：是一个指向变量对象的指针列表。<br>作用域链用途：是保证对执行环境有权访问的所有变量和函数的有序访问。</p>
<p>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链最前端开始，然后逐级向后回溯，直到找到表示标识符为止。内部环境可以通过作用域链访问所有外部环境，反之不行，可见这些环境之间的联系是线性的，有次序的，单向的。</p>
<p>一般来说，函数执行完毕，其对应的活动对象会被销毁。但是闭包情况下，，其外部函数在执行完毕后，其执行环境的作用域链会被销毁，但是其活动对象仍留在内存中。原因是，内部函数会将外部函数的活动对象添加到自己的作用域链中，即使外部函数执行完毕，内部函数的作用域链仍在引用其活动对象。</p>
<h1 id="for循环中闭包问题"><a href="#for循环中闭包问题" class="headerlink" title="for循环中闭包问题"></a>for循环中闭包问题</h1><p>作用域链这种配置机制引出一个副作用，即在迭代情况下，闭包只能取得包含函数中任何变量的最后一个值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arr = []; i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">    arr.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(i);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">arr[<span class="number">0</span>](); <span class="comment">//4</span></div><div class="line">arr[<span class="number">1</span>](); <span class="comment">//4</span></div></pre></td></tr></table></figure></p>
<p>for循环执行四次，每次执行都向arr数组中添加一个匿名函数，但是这个匿名函数不执行，不会创建活动对象。当调用数组中的匿名函数时，for循环已经结束，i=4，所以arr中每一项执行的结果都是一样的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arr = []; i &lt;= <span class="number">3</span>; i++) &#123;</div><div class="line">    arr.push((<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                alert(j);</div><div class="line">            &#125;;</div><div class="line">        &#125;)(i)</div><div class="line">    );</div><div class="line">&#125;</div><div class="line">arr[<span class="number">0</span>](); <span class="comment">//0</span></div><div class="line">arr[<span class="number">1</span>](); <span class="comment">//1</span></div></pre></td></tr></table></figure></p>
<p>闭包有一个作用保护私有变量，这里j作为外部函数的私有变量被闭包保护起来。function(j)这个外部函数是自执行匿名函数，会创建活动对象，因为闭包的存在，每次执行产生活动对象会保留下来。<br>每次循环外部匿名函数执行时的作用域链之间的关系如图：<br><img src="/images/scopechain.jpg" alt=""></p>
<p>相关资源：<br><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-closure/index.html" target="_blank" rel="external">闭包的概念、形式与应用</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="external">MDN-闭包</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 一个闭包就是一个函数和被创建的函数中的作用域对象的组合。–MDN&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Canvas基础</title>
    <link href="http://yoursite.com/2016/07/28/canvas-0/"/>
    <id>http://yoursite.com/2016/07/28/canvas-0/</id>
    <published>2016-07-28T04:23:08.000Z</published>
    <updated>2016-10-30T09:15:27.084Z</updated>
    
    <content type="html"><![CDATA[<p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。</p>
<h1 id="创建canvas"><a href="#创建canvas" class="headerlink" title="创建canvas"></a>创建canvas</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Canvas是一个HTML标签，设置id和样式：width属性和height属性，不带单位，因为这样也一同决定了画布的分辨率。</p>
<a id="more"></a>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>JavaScript 使用 id 来寻找 canvas 元素：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</div><div class="line"><span class="comment">//context绘图上下文环境，提供绘制接口</span></div><div class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</div></pre></td></tr></table></figure></p>
<p>接下来使用context绘制，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//指定大小</div><div class="line">canvas.width</div><div class="line">canvas.height</div></pre></td></tr></table></figure></p>
<h1 id="Canvas基于状态绘制"><a href="#Canvas基于状态绘制" class="headerlink" title="Canvas基于状态绘制"></a>Canvas基于状态绘制</h1><p>先设置绘图状态<br>再调用具体函数绘制</p>
<h1 id="状态函数"><a href="#状态函数" class="headerlink" title="状态函数"></a>状态函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">context.moveTo();</div><div class="line">contxt.lineTo();</div><div class="line">//线段粗细</div><div class="line">context.lineWidth = 5;</div><div class="line">//线条颜色</div><div class="line">context.strokeStyle = &quot;blue&quot;;</div><div class="line">//填充颜色</div><div class="line">context. fillStyle =&quot;rgb(2,100,30)&quot;;</div><div class="line">//重新规划路径，清空</div><div class="line">context.beginPath();</div><div class="line">//自动闭合路径,对fill（）没有用</div><div class="line">context.closePath();</div></pre></td></tr></table></figure>
<h1 id="绘制函数"><a href="#绘制函数" class="headerlink" title="绘制函数"></a>绘制函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">context.stroke();</div><div class="line">context.fill();</div></pre></td></tr></table></figure>
<p>#弧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context.arc(</div><div class="line">centerx,centery,radius,</div><div class="line">startingAngle,endingAngle,</div><div class="line">anticlockwise = false//顺时针默认</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>#倒计时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">第(i,j)个圆的圆心位置：</div><div class="line">centerX：x+j*2(R+1) +(R+1)</div><div class="line">centerY：y+i*2(R+1) +(R+1)</div><div class="line">时间相关的函数：</div><div class="line">const endtime = new Date(2016,6,1,12,23,56);</div><div class="line">//月份从零开始计，6代表7月</div></pre></td></tr></table></figure></p>
<h1 id="简单动画架构"><a href="#简单动画架构" class="headerlink" title="简单动画架构"></a>简单动画架构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">setInterval(</div><div class="line">//匿名函数</div><div class="line">function()&#123;</div><div class="line">    //绘制当前画面</div><div class="line">    render();</div><div class="line">    //调整数据</div><div class="line">    update();</div><div class="line">&#125;,</div><div class="line">50</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">context.clearRect(x,y,width,height);</div></pre></td></tr></table></figure>
<h1 id="绘制封闭多边形"><a href="#绘制封闭多边形" class="headerlink" title="绘制封闭多边形"></a>绘制封闭多边形</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">成对使用</div><div class="line"></div><div class="line">context.beginPath();//起始一条路径，或重置当前路径</div><div class="line">context.closePath();//  创建从当前点回到起始点的路径</div></pre></td></tr></table></figure>
<p>当我们绘制一个需要描边的填充图时，应该先填充颜色，在描边，否则填充颜色会覆盖边。</p>
<h1 id="四边形"><a href="#四边形" class="headerlink" title="四边形"></a>四边形</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">context.rect(x,y,width,height)；//规划矩形路径,路径方向顺时针方向</div><div class="line">context.fillRect(x,y,width,height);//直接使用当前的fillStyle，绘制出填充的矩形</div><div class="line">context.strokeRect(x,y,wodth,height)；//使用当前的strokeStyle，绘制边框</div><div class="line">clearRect();//在给定的矩形内清除指定的像素</div></pre></td></tr></table></figure>
<p>后绘制图形会遮盖前绘制的图形</p>
<h1 id="颜色表示方法"><a href="#颜色表示方法" class="headerlink" title="颜色表示方法"></a>颜色表示方法</h1><p>#ffffff<br>#642<br>rgb(255,128,0)<br>rgba(100,100,100,0.8)<br>hsl(20,62%,28%)<br>hsla(40,82%,33%,0.6)<br>red</p>
<h1 id="线条的属性"><a href="#线条的属性" class="headerlink" title="线条的属性"></a>线条的属性</h1><p>lineWidth<br>线条两端，只能用于开始和结尾处，不能用于连接处,设置或返回线条的结束端点样式<br>lineCap:butt(default)<br>        round<br>        square<br>线条连接,设置或返回两条线相交时，所创建的拐角类型<br>lineJoin:miter(default)//尖角<br>         bevel//斜接<br>         round//圆角</p>
<p>miterLimite：设置或返回最大斜接长度“当宽线条使用设置为 “miter” 的 lineJoin 属性绘制并且两条线段以锐角相交的时候，所得的斜面可能相当长。当斜面太长，就会变得不协调。miterLimit 属性为斜面的长度设置一个上限。这个属性表示斜面长度和线条长度的比值。默认是 10，意味着一个斜面的长度不应该超过线条宽度的 10 倍。如果斜面达到这个长度，它就变成斜角了。”</p>
<h1 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">位移 translate(x,y)//基坐标，叠加作用</div><div class="line">旋转 rotate(deg)//弧度值</div><div class="line">缩放 scale(sx,sy)</div><div class="line"></div><div class="line">context.save();//保存当前的图形状态</div><div class="line">context.restore();//成对出现，恢复，返回在save()所有状态</div></pre></td></tr></table></figure>
<p>缩放 scale(sx,sy);<br>副作用:坐标，边框</p>
<h1 id="变换矩阵"><a href="#变换矩阵" class="headerlink" title="变换矩阵"></a>变换矩阵</h1><p>transform(a,b,c,d,e,f)<br>|a c e|<br>|b d f|<br>|0 0 1|<br>a水平缩放(1)<br>b水平倾斜(0)<br>c垂直倾斜(0)<br>d垂直缩放(1)<br>e水平位移(0)<br>f垂直位移(0)<br>多次级联<br>context.setTransform(a,b,c,d,e,f);//使之前的transform失效</p>
<h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><p>fillStyle||strokeStyle<br>线性渐变色<br>1.var grd = context.createLinearGradient(xstart,ystart,xend,yend);<br>2.grd.addColorStop(stop,color);//stop取0~1,规定渐变对象中的颜色和停止位置<br>径向渐变 Radial Gradient<br>1.var grd = context.createRadialGradient(x0,y0,r0,x1,y1,r1);<br>2.grd.addColorStop(stop,color);//stop取0~1</p>
<p> 使用图片/画布/video创建样式<br>createPattern(canvas/img/video,repeat-style)；//在指定的方向上重复指定的元素<br>repeat-style：no-repeat 不重复<br>              repeat-x   沿x轴重复<br>              repeat-y   沿y轴重复<br>              repeat     x，y都重复</p>
<h1 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h1><p>cxt.arc(centerx,centery,radius,staertingAvgle,endingAngle,anticlockwise =flase);<br>//无论顺逆，角度不变<br>arcTo(x1,y1,x2,y2,radius)<br>控制点用moveTo指定<br>贝塞尔曲线Bazier<br>context.quadraticCurveTo(cpx,cpy,x,y);<br>context.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);</p>
<h1 id="文字渲染"><a href="#文字渲染" class="headerlink" title="文字渲染"></a>文字渲染</h1><p>fillText()  在画布上绘制“被填充的”文本<br>strokeText()    在画布上绘制文本（无填充）<br>参数：<br>text     规定在画布上输出的文本。<br>x   开始绘制文本的 x 坐标位置（相对于画布）。<br>y   开始绘制文本的 y 坐标位置（相对于画布）。<br>maxWidth    可选。允许的最大文本宽度，以像素计。<br>属性：<br>font    设置或返回文本内容的当前字体属性<br>textAlign   设置或返回文本内容的当前对齐方式<br>textBaseline    设置或返回在绘制文本时使用的当前文本基线</p>
<h1 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h1><p>shadowColor:设置或返回用于阴影的颜色<br>shadowBlur:设置或返回用于阴影的模糊级别<br>shadowOffsetX:设置或返回阴影距形状的水平距离<br>shadowOffsetY:设置或返回阴影距形状的垂直距离</p>
<h1 id="剪辑区域"><a href="#剪辑区域" class="headerlink" title="剪辑区域"></a>剪辑区域</h1><p>clip();<br>从原始画布剪切任意形状和尺寸的区域</p>
<h1 id="路径方向"><a href="#路径方向" class="headerlink" title="路径方向"></a>路径方向</h1><p>非零环绕原则</p>
<h1 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cxt.clearRect(x,y,width,height);//自清空，用于动画</div><div class="line">cxt.isPointInPath(x,y);//检测这个点是否在规划的路径中</div><div class="line">canvas.addEventListener(&quot;mouseup&quot;,detect);</div></pre></td></tr></table></figure>
<p>getBoundingClientRect()获取元素位置。用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。getBoundingClientRect是DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）。该函数返回一个Object对象，该对象有6个属性：top,lef,right,bottom,width,height；这里的top、left和css中的理解很相似，width、height是元素自身的宽高，但是right，bottom和css中的理解有点不一样。right是指元素右边界距窗口最左边的距离，bottom是指元素下边界距窗口最上面的距离。</p>
<h1 id="图形库"><a href="#图形库" class="headerlink" title="图形库"></a>图形库</h1><p>canvasplus<br><a href="https://code.google.com/p/canvasplus/" target="_blank" rel="external">https://code.google.com/p/canvasplus/</a></p>
<p>artisan js<br><a href="http://artisanjs.com/" target="_blank" rel="external">http://artisanjs.com/</a></p>
<p>Rgraph<br><a href="https://roopons.com.au/wp-content/plugins/viral-optins/js/rgraph/" target="_blank" rel="external">https://roopons.com.au/wp-content/plugins/viral-optins/js/rgraph/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。&lt;/p&gt;
&lt;h1 id=&quot;创建canvas&quot;&gt;&lt;a href=&quot;#创建canvas&quot; class=&quot;headerlink&quot; title=&quot;创建canvas&quot;&gt;&lt;/a&gt;创建canvas&lt;/h1&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myCanvas&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;100&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Canvas是一个HTML标签，设置id和样式：width属性和height属性，不带单位，因为这样也一同决定了画布的分辨率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text3 基础篇</title>
    <link href="http://yoursite.com/2016/07/24/sublime-1/"/>
    <id>http://yoursite.com/2016/07/24/sublime-1/</id>
    <published>2016-07-24T08:19:08.000Z</published>
    <updated>2016-07-25T14:56:14.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Sublime-Text3"><a href="#安装Sublime-Text3" class="headerlink" title="安装Sublime Text3"></a>安装Sublime Text3</h1><p>Sublime Text<a href="http://www.sublimetext.com/" target="_blank" rel="external">官方网站</a>提供了Sublime Text各系统各版本的下载，目前Sublime Text的最新版本是<a href="http://www.sublimetext.com/3" target="_blank" rel="external">Sublime Text3</a>。这里以Windows版本的SublimeText3安装为例。注意在安装时勾选Add to explorer context menu，这样在右键单击文件时就可以直接使用Sublime Text打开。<br><a id="more"></a></p>
<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>使用<code>Win + R</code>运行<code>sysdm.cpl</code>打开“系统属性”。然后在“高级”选项卡里选择“环境变量”，编辑“Path”，增加Sublime Text的安装目录（例如D:\Sublime Text 3）。<br>接下来就可以在命令行里面利用subl命令直接使用Sublime Text了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subl file    :: 使用Sublime Text打开file文件</div><div class="line">subl folder  :: 使用Sublime Text打开folder文件夹</div><div class="line">subl .       :: 使用Sublime Text当前文件夹</div></pre></td></tr></table></figure></p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>按功能快捷键列表如下<br>通用（General）</p>
<blockquote>
<p>   Ctrl+Z: 撤销<br>   Ctrl+Y: 恢复撤销<br>   Ctrl+T：词互换<br>   Ctrl + U:回退，软撤销<br>   ↑↓←→：上下左右移动光标，注意不是不是KJHL！<br>   Alt：调出菜单<br>   Ctrl + Shift + P：调出命令板（Command Palette）<br>   Ctrl + `：调出控制台<br>   Ctrl+K+B 开启/关闭侧边栏</p>
</blockquote>
<p>缩进</p>
<blockquote>
<p>   ctrl+] 增加缩进<br>   ctrl+[ 减少缩进<br>   Tab：自动缩进四个空格<br>   Shift+Tab： 去除缩进<br>   ctrl+shift+v ：粘贴时缩进</p>
</blockquote>
<p>编辑（Editing）</p>
<blockquote>
<p>   Ctrl + Enter：在当前行下面新增一行然后跳至该行<br>   Ctrl + Shift + Enter：在当前行上面增加一行并跳至该行<br>   Ctrl + ←/→：进行逐词移动<br>   Ctrl + Shift + ←/→:进行逐词选择<br>   Ctrl + ↑/↓:移动当前显示区域<br>   Ctrl + Shift + ↑/↓:移动当前行，与上下行互换<br>   Ctrl+鼠标左键：可以同时选择要编辑的多处文本<br>   Ctrl+Shift+D ：复制光标所在整行，插入在该行之前<br>   Ctrl+Shift+K ：删除整行<br>   Ctrl+KK ：从光标处删除至行尾<br>   Ctrl+K Backspace ：从光标处删除至行首</p>
</blockquote>
<p>选择（Selecting）</p>
<blockquote>
<p>   Ctrl + D：选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl +<br>   D选择该词出现的下一个位置，在多重选词的过程中，使用Ctrl +<br>   K进行跳过，使用Ctrl + U进行回退，使用Esc退出多重编辑<br>   Ctrl + Shift + L：将当前选中区域打散<br>   Ctrl+L：选择整行（按住-继续选择下行）<br>   Ctrl + J：把当前选中区域合并为一行<br>   Ctrl + M：在起始括号和结尾括号间切换，光标移动至括号内开始或结束的位置&gt;<br>   Ctrl + Shift + M：快速选择括号间的内容<br>   Ctrl + Shift + J：快速选择同缩进的内容<br>   Ctrl + Shift + Space：快速选择当前作用域（Scope）的内容<br>   Ctrl+Shift+A ：选择光标位置父标签对儿</p>
</blockquote>
<p>查找&amp;替换（Finding&amp;Replacing）</p>
<blockquote>
<p>   F3：跳至当前关键字下一个位置<br>   Shift+F3：跳到当前关键字上一个位置，可一次性选择全部的相同文本进行同时编辑<br>   Alt + F3：选中当前关键字出现的所有位置<br>   Ctrl + F/H：进行标准查找/替换，之后</p>
<pre><code>* Alt + C：切换大小写敏感（Case-sensitive）模式
* Alt + W：切换整字匹配（Whole matching）模式
* Alt + R：切换正则匹配（Regex matching）模式
* Ctrl + Shift + H：替换当前关键字
* Ctrl + Alt + Enter：替换所有关键字匹配
</code></pre><p>   Ctrl + Shift + F：多文件搜索&amp;替换</p>
</blockquote>
<p>格式</p>
<blockquote>
<p>  Ctrl+Shift+[ ： 折叠代码<br>  Ctrl+Shift+] ：展开代码<br>  Ctrl+K+U ：改为大写<br>  Ctrl+K+L ：改为小写<br>  Alt+. ：闭合当前标签</p>
</blockquote>
<p>注释</p>
<blockquote>
<p>   Ctrl+Shift+/ ：注释已选择内容<br>   Ctrl+/ ：注释整行（如已选择内容，同“Ctrl+Shift+/”效果）</p>
</blockquote>
<p>跳转（Jumping）</p>
<blockquote>
<p>   Ctrl + P：跳转到指定文件，输入文件名后可以：</p>
<pre><code>* @ 符号跳转：输入@symbol跳转到symbol符号所在的位置
* # 关键字跳转：输入#keyword跳转到keyword所在的位置
* : 行号跳转：输入:12跳转到文件的第12行。
</code></pre><p>   Ctrl + R：跳转到指定符号 快速列出/<br>   跳转到某个函数，对于Markdown，会列出其大纲<br>   Ctrl + G：跳转到指定行号</p>
</blockquote>
<p>窗口（Window）</p>
<blockquote>
<p>   Ctrl + Shift + N：创建一个新窗口<br>   Ctrl + N：在当前窗口创建一个新标签<br>   Ctrl + W：关闭当前标签，当窗口内没有标签时会关闭该窗口<br>   Ctrl + Shift + T：恢复刚刚关闭的标签<br>   Ctrl+Tab： 当前窗口中的标签页切换<br>   Ctrl+F2 ：设置/取消书签<br>  Shift+F2 ：上一个书签</p>
</blockquote>
<p>屏幕（Screen）</p>
<blockquote>
<p>   F11：切换普通全屏<br>   Shift + F11：切换无干扰全屏<br>   Alt+Shift+1:（非小键盘）窗口分屏，恢复默认1屏<br>   Alt+Shift+2:左右分屏-2列<br>   Alt+Shift+3:左右分屏-3列<br>   Alt+Shift+4: 左右分屏-4列<br>   Alt+Shift+5:等分4屏<br>   Alt+Shift+8: 垂直分屏-2屏<br>   Alt+Shift+9: 垂直分屏-3屏<br>   分屏之后，使用Ctrl + 数字键跳转到指定屏，使用Ctrl + Shift +<br>   数字键将当前屏移动到指定屏</p>
</blockquote>
<h1 id="快捷键配置"><a href="#快捷键配置" class="headerlink" title="快捷键配置"></a>快捷键配置</h1><p><a href="http://sublime-text-unofficial-documentation.readthedocs.io/en/latest/reference/settings.html" target="_blank" rel="external">系统快捷键的默认配置</a><br>自定义快捷键配置：<br>打开<code>Preferences -&gt; Key Bindings - User</code></p>
<h1 id="Sublime-Text内运行javascript-ES6"><a href="#Sublime-Text内运行javascript-ES6" class="headerlink" title="Sublime Text内运行javascript(ES6)"></a>Sublime Text内运行javascript(ES6)</h1><p>1.首先安装nodejs<br>当然你可以使用其它诸如jsc之类的环境来运行js, 本文使用的是nodejs. 首先确保你的电脑已经安装好nodejs, 并已将其添加到环境变量中 (一般安装时自动添加或者询问是否添加)</p>
<p>2.添加build system<br>在sublime text中依次打开<code>Tools -&gt; Build System -&gt; New Build System…</code>粘贴以下代码后保存(如Node.sublime-build), 然后把Build System设成Automatic<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; “cmd”: [“node”, “—use-strict”, “—harmony”, “$file”], “selector”: “source.js”&#125;</div></pre></td></tr></table></figure></p>
<p>3.附加说明<br>在以上的build文件中(Node.sublime-build), node是执行命令,<code>—harmony</code>和<code>—use-strict</code>是执行参数, <code>$file</code>是当前文件名, 所以一次build操作实际上相当于在命令行中执行了<code>node —use-strict —harmony filename</code>. <code>—harmony</code>表示启用ES Harmony features, 而这些features目前只能在strict模式下运行, 所以需要同时添加<code>use-strict</code>参数(详见<a href="http://stackoverflow.com/questions/17253509/what-is-extended-mode" target="_blank" rel="external">what-is-extended-mode</a>).<br>如果不想启用es6的特性,把build文件更改成以下代码保存即可.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; “cmd”: [“node”, “$file”], “selector”: “source.js”&#125;</div></pre></td></tr></table></figure></p>
<p>4.具体使用<br>在sublime test中新建一个test.js文件, 然后输入你的测试代码, 比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (let i = 0; i &lt; 3; i++) &#123;</div><div class="line">    console.log(&apos;i:&apos;, i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用快捷键 <code>ctrl + b</code>, 将得到以下执行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i: 0i: 1i: 2[Finished in 0.1s]</div></pre></td></tr></table></figure></p>
<p>注解:</p>
<blockquote>
<p>  (1)文件必须是存在于磁盘中的, 而不是untitled的,<br>  否则sublime无法找到相应的文件.<br>  (2)Nodejs安装目录需要加入path环境变量中，否则Ctrl+B运行 会出现：<br>  [WinError2] 系统找不到指定的文件。</p>
</blockquote>
<h1 id="正则表达式（学习中）·"><a href="#正则表达式（学习中）·" class="headerlink" title="正则表达式（学习中）·"></a>正则表达式（学习中）·</h1><p><em><a href="http://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="external">正则表达式</a></em>是非常强大的文本查找&amp;替换工具，Sublime Text中使用Alt + R切换正则匹配模式的开启/关闭。Sublime Text的使用<em><a href="http://www.boost.org/doc/libs/1_44_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html" target="_blank" rel="external">Boost里的Perl正则表达式风格</a></em>。<br><a href="http://regex.info/" target="_blank" rel="external">Mastering Regex</a>（中译本：<a href="http://book.douban.com/subject/2154713/" target="_blank" rel="external">精通正则表达式</a>）对正则表达式的原理和各语言下的使用进行了详细介绍。<br>优秀教程：<br><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">“正则表达式30分钟入门教程”</a><br><a href="http://msdn.microsoft.com/zh-cn/library/ae5bf541(v=vs.90" target="_blank" rel="external">MSDN正则表达式教程</a>)<a href="http://www.williamlong.info/archives/433.html" target="_blank" rel="external">月光博客～常用正则表达式</a>在线测试工具：<br><a href="http://regexpal.com/" target="_blank" rel="external">regexpal</a><br><a href="http://www.regexr.com/" target="_blank" rel="external">regexer</a></p>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="http://sublime-text-unofficial-documentation.readthedocs.org/" target="_blank" rel="external">非官方文档</a><br><a href="http://www.sublimetext.com/docs/3/" target="_blank" rel="external">官方文档</a><br><a href="https://sublime.wbond.net/" target="_blank" rel="external">Package Control</a> 大量的Sublime Text插件和主题。<br><a href="http://zh.lucida.me/blog/sublime-text-complete-guide/" target="_blank" rel="external">Sublime Text 全程指南</a><br><a href="http://www.jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/#three" target="_blank" rel="external">如何优雅地使用Sublime Text</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装Sublime-Text3&quot;&gt;&lt;a href=&quot;#安装Sublime-Text3&quot; class=&quot;headerlink&quot; title=&quot;安装Sublime Text3&quot;&gt;&lt;/a&gt;安装Sublime Text3&lt;/h1&gt;&lt;p&gt;Sublime Text&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;官方网站&lt;/a&gt;提供了Sublime Text各系统各版本的下载，目前Sublime Text的最新版本是&lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text3&lt;/a&gt;。这里以Windows版本的SublimeText3安装为例。注意在安装时勾选Add to explorer context menu，这样在右键单击文件时就可以直接使用Sublime Text打开。&lt;br&gt;
    
    </summary>
    
    
      <category term="sublime text3" scheme="http://yoursite.com/tags/sublime-text3/"/>
    
  </entry>
  
  <entry>
    <title>Git与Github</title>
    <link href="http://yoursite.com/2016/07/23/git-0/"/>
    <id>http://yoursite.com/2016/07/23/git-0/</id>
    <published>2016-07-23T04:23:08.000Z</published>
    <updated>2016-10-17T04:52:06.133Z</updated>
    
    <content type="html"><![CDATA[<p>Git 是一个为了更好地管理 Linux内核开发而创立的分布式版本控制和软件配置管理软件。 国内外知名 Git 代码托管网站有：<br><a href="http://GitHub.com" target="_blank" rel="external">github</a><br><a href="http://Coding.net" target="_blank" rel="external">Coding</a><br><a href="http://code.csdn.net/" target="_blank" rel="external">code.csdn</a><br><a id="more"></a></p>
<p>GitHub 使用 Git 作为版本控制系统（version control system）提供在线源码托管的服务，同时是个有社交功能的开发者社区。<br>国外类似服务：<br><a href="https://bitbucket.org/" target="_blank" rel="external">Bitbucket</a><br><a href="http://Gitlab.com" target="_blank" rel="external">Gitlab</a><br>国内类似服务：<br><a href="http://Gitcafe.com" target="_blank" rel="external">Gitcafe</a></p>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程 - 廖雪峰的官方网站</a><br><a href="https://git-scm.com/book/en/v2" target="_blank" rel="external">Pro Git</a><br><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git - 简明指南</a><br><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="external">图解 Git</a><br><a href="http://www.yangzhiping.com/tech/github.html" target="_blank" rel="external">如何高效利用GitHub–阳志平</a><br><a href="http://www.worldhello.net/gotgithub/#id4" target="_blank" rel="external">worldhello</a><br><a href="help.github.com/">Github帮助文档</a><br><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/index.html" target="_blank" rel="external">Git Magic</a></p>
<h1 id="过后填坑···"><a href="#过后填坑···" class="headerlink" title="过后填坑···"></a>过后填坑···</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git 是一个为了更好地管理 Linux内核开发而创立的分布式版本控制和软件配置管理软件。 国内外知名 Git 代码托管网站有：&lt;br&gt;&lt;a href=&quot;http://GitHub.com&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://Coding.net&quot;&gt;Coding&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://code.csdn.net/&quot;&gt;code.csdn&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="NODE" scheme="http://yoursite.com/tags/NODE/"/>
    
  </entry>
  
  <entry>
    <title>Winsows上Nodejs的安装配置</title>
    <link href="http://yoursite.com/2016/07/23/nodejs-0/"/>
    <id>http://yoursite.com/2016/07/23/nodejs-0/</id>
    <published>2016-07-23T04:23:08.000Z</published>
    <updated>2016-07-25T14:05:05.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h1><blockquote>
<p>系统：windows8.1</p>
</blockquote>
<p>最简单安装的方法，在<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载.msi格式，或者从我的百度云盘链接: <a href="http://pan.baidu.com/s/1mim4hvU" target="_blank" rel="external">http://pan.baidu.com/s/1mim4hvU</a> 密码: scaf，默认安装会自动配置环境变量，也可以更改安装目录。我的安装目录<code>C:\Program Files\nodejs</code>。npm已经集成在nodejs，不用单独安装。在该目录下新建两个文件夹node_cache和node_global。</p>
<a id="more"></a>
<p><img src="http://i1.piimg.com/567571/62c1c72771c19ca2.png" alt="nodejs目录结构"><br>node_cache是npm缓存目录，避免相同的包每次都下载。<br>node_global是全局安装的目录。</p>
<blockquote>
<p><code>npm install xxx -g</code>时， 模块将被下载安装到”全局目录”中。”全局目录”通过<br><code>npm config set prefix</code>“目录路径” 来设置。<br>通过 <code>npm config get prefix</code> 来获取当前设置的目录。使用全局安装方式统一安装的<br>一个目录中去,这样既方便管理、结构清晰还可以重复利用。</p>
</blockquote>
<p>在管理员身份下运行cmd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config set cache &quot;C:\Program Files\nodejs\node_cache&quot;</div><div class="line">npm config set prefix &quot;C:\Program Files\nodejs\node_global&quot;</div></pre></td></tr></table></figure></p>
<h1 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h1><p>由于改变了node_modules的默认安装目录,需要重新配置环境变量,<code>计算机\&gt;系统属性\&gt;高级\&gt;环境变量</code><br>用户环境变量<br>编辑PATH:<code>C:\Program Files\nodejs\node_modules\npm;C:\Program Files\nodejs\node_global</code><br>添加NODE_PATH:<code>C:\Program Files\nodejs\node_global\node_modules</code><br>系统环境变量<br>编辑path：<code>C:\Program Files\nodejs\</code></p>
<h1 id="Windows-系统下设置Nodejs-NPM全局路径"><a href="#Windows-系统下设置Nodejs-NPM全局路径" class="headerlink" title="Windows 系统下设置Nodejs NPM全局路径"></a>Windows 系统下设置Nodejs NPM全局路径</h1><p>在cmd下执行以下命令无效的情况下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config set cache &quot;C:\Program Files\nodejs\node_cache&quot;</div><div class="line">npm config set prefix &quot;C:\Program Files\nodejs\node_global&quot;</div></pre></td></tr></table></figure>
<p>在nodejs的安装目录中找到<code>node_modules\npm\.npmrc文件</code>（C:\Program Files\nodejs\node_modules\npm）</p>
<p>修改如下即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">prefix=C:\Program Files\nodejs\node_global</div><div class="line">cache=C:\Program Files\nodejs\node_cache</div></pre></td></tr></table></figure></p>
<h1 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h1><p>安装完成后在管理员下运行cmd<br><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-7-23/79224504.jpg" alt="安装nodejs版本号"><br>如上图所示则安装成功</p>
<h1 id="安装相关环境"><a href="#安装相关环境" class="headerlink" title="安装相关环境"></a>安装相关环境</h1><p>切记在管理员下运行cmd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g jshint</div><div class="line">npm install -g csslint</div></pre></td></tr></table></figure></p>
<h1 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a>全局安装与本地安装</h1><p><code>npm install -g ***</code>表示全局安装，这样安装的安装包都在当前用户下，在磁盘的所有其他地方都可以访问到，比较方面。否则<code>npm install ***</code>表示本地安装，安装在当前目录下，只能在当前目录下使用。<br>如果一个包是要当做命令一样的来使用，就推荐进行全局安装，而如果一个包是使用在项目里面的话，则使用本地安装，这样避免了不同项目对不同版本的包之间的相互依赖的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装Nodejs&quot;&gt;&lt;a href=&quot;#安装Nodejs&quot; class=&quot;headerlink&quot; title=&quot;安装Nodejs&quot;&gt;&lt;/a&gt;安装Nodejs&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;系统：windows8.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最简单安装的方法，在&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;官网&lt;/a&gt;下载.msi格式，或者从我的百度云盘链接: &lt;a href=&quot;http://pan.baidu.com/s/1mim4hvU&quot;&gt;http://pan.baidu.com/s/1mim4hvU&lt;/a&gt; 密码: scaf，默认安装会自动配置环境变量，也可以更改安装目录。我的安装目录&lt;code&gt;C:\Program Files\nodejs&lt;/code&gt;。npm已经集成在nodejs，不用单独安装。在该目录下新建两个文件夹node_cache和node_global。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NODE" scheme="http://yoursite.com/tags/NODE/"/>
    
  </entry>
  
  <entry>
    <title>JSHint使用基础</title>
    <link href="http://yoursite.com/2016/07/23/nodejs-1/"/>
    <id>http://yoursite.com/2016/07/23/nodejs-1/</id>
    <published>2016-07-23T04:23:08.000Z</published>
    <updated>2016-08-24T14:16:49.810Z</updated>
    
    <content type="html"><![CDATA[<p>JSHint是一款在线的js代码验证工具，它能帮助你找出在开发中不经意犯下错误和可能存在的潜在问题。强烈建议尽可能的使用检查工具来确认你的编码风格以及设计模式的正确性。JSHint 提供在线和本地使用(基于 Node.js)。同时，还有很多插件支持VS，Eclipse，Notepad++，Sublime Text等。<br><a id="more"></a><br>JSHint主页：<a href="http://jshint.com/" target="_blank" rel="external">http://jshint.com/</a><br>JSHint下载安装：<a href="http://jshint.com/install/" target="_blank" rel="external">http://jshint.com/install/</a><br>JSHint官方文档：<a href="http://jshint.com/docs/" target="_blank" rel="external">http://jshint.com/docs/</a><br>Github：<a href="https://github.com/jshint/jshint/" target="_blank" rel="external">https://github.com/jshint/jshint/</a><br><a href="http://www.hyjiacan.com/javascript-jshint/" target="_blank" rel="external">Javascript代码验证工具 JSHint</a></p>
<h1 id="安装jshint"><a href="#安装jshint" class="headerlink" title="安装jshint"></a>安装jshint</h1><p>在Node.js上全局安装jshint<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install jshint -g</div></pre></td></tr></table></figure></p>
<p>在对应目录下运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ jshint move.js</div><div class="line">move.js: line 41, col 10, Missing semicolon.</div><div class="line"></div><div class="line">1 error</div></pre></td></tr></table></figure></p>
<p>一个错误，少一个分号。<br>如果路径是短横线 (-)，那么JSHint会从标准输入读取数据。</p>
<h1 id="配置JSHint"><a href="#配置JSHint" class="headerlink" title="配置JSHint"></a>配置JSHint</h1><p>有三种配置方式：<br>1.使用指定的配置文件 .jshintrc</p>
<blockquote>
<p>这个设置允许您每个项目有不同的配置文件。把你的文件放到项目根目录,只要你运行<br>JSHint从任何地方在你的项目目录树,将使用相同的配置文件。</p>
</blockquote>
<p>JSHint默认使用用户home目录下的.jshintrc文件（json格式）作为配置文件,也可以在你的项目目录下添加一个.jshintrc文件，JSHint会在检测文件时从文件所在目录往上找，直到找到jshintrc文件为止。<br><a href="https://github.com/jshint/jshint/blob/master/examples/.jshintrc" target="_blank" rel="external">jshintrc文件示例</a></p>
<p>2.通过 –config标记手动配置<br>如果你并没有将规则文件命名为符合规则的名字（即用.jshintrc），那么可以在运行JSHint的时候手动指定规则文件，例如你将规则文件命名为jshint.json。那么可以使用一下命令来运行JSHint并应用你的规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jshint my_app.js --config /root/application/jshint.json  //指定规则文件路径</div></pre></td></tr></table></figure></p>
<p>3.把配置写在 jshintConfig 目录下的 package.json 文件中<br> 配置文件是指定了JSHint配置选项开头的json数据格式，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;  &quot;undef&quot;: true,  &quot;unused&quot;: true,  &quot;globals&quot;: &#123; &quot;MY_GLOBAL&quot;: false &#125;&#125;</div></pre></td></tr></table></figure></p>
<p>上面的配置中，JSHint 会对未定义(undefined)和未使用(unused) 的变量发出警告，globals是指定全局变量。</p>
<h1 id="内置配置"><a href="#内置配置" class="headerlink" title="内置配置"></a>内置配置</h1><p>对于需要对单个文件进行特定设置的需求，我们可以在文件最上方使用注释行来设定JSHint:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/* jshint undef: true, unused: true */</div><div class="line">/* globals MY_GLOBAL */</div></pre></td></tr></table></figure></p>
<p>上面代码片段将启用警告未定义的和未使用的变量和告诉JSHint全局变量命名MY_GLOBAL。<br>类似对于文件的设定，对于函数的设定方式需要把相应的注释行移到函数内：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// From another file</div><div class="line">function b() &#123;</div><div class="line">  &quot;use strict&quot;;</div><div class="line">  /* ... */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="屏蔽警告"><a href="#屏蔽警告" class="headerlink" title="屏蔽警告"></a>屏蔽警告</h2><p>某些警告是无法通过错误来进行屏蔽的，这时候你首先需要知道你要屏蔽错误的错误代码，通过添加<code>--verbose</code>参数来获得：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jshint --verbose myfile.js</div><div class="line">myfile.js: line 6, col 3, Unnecessary directive &quot;use strict&quot;. (W034)</div></pre></td></tr></table></figure></p>
<p>如果需要屏蔽这个错误，可在文件中加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/* jshint -W034 */</div></pre></td></tr></table></figure></p>
<p>这样，代码为 W034的警告就会被隐藏。有两点需要注意:</p>
<blockquote>
<ol>
<li>这种语法只对警告(W开头的代码)有效，而对错误 (E开头的代码)是无效的。</li>
<li>这种语法会隐藏所有指定代码的警告。</li>
</ol>
</blockquote>
<p>要重新显示上面隐藏的警告，使用下面的语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/* jshint +W034 */</div></pre></td></tr></table></figure></p>
<h1 id="JSHint-指令"><a href="#JSHint-指令" class="headerlink" title="JSHint 指令"></a>JSHint 指令</h1><p>jshint: 设置JSHint选项指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/* jshint strict: true */</div></pre></td></tr></table></figure></p>
<p>jslint：设置是否兼容 JSLint<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/* jslint vars: true */</div></pre></td></tr></table></figure></p>
<p>globals: 告诉 JSHint 全局变量是在其它地方定义的。当值(value)为false(默认)时，JSHint会认为变量是只读的。通常和 undef 选项一起使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/* global MY_LIB: false */</div></pre></td></tr></table></figure></p>
<p>在globals配置中，也可以把全局变量加到黑名单中，以使得变量在当前文件中禁用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/* global -BAD_LIB */</div></pre></td></tr></table></figure></p>
<p>exported: 告诉 JSHint 变量在当前文件定义但是会在其它文件中使用的指令，通常和 unused 指令一起使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/* exported EXPORTED_LIB */</div></pre></td></tr></table></figure></p>
<p>ignore: 告诉 JSHint 要跳过的代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Code here will be linted with JSHint.</div><div class="line">/* jshint ignore:start */</div><div class="line">// Code here will be linted with ignored by JSHint.</div><div class="line">/* jshint ignore:end */</div></pre></td></tr></table></figure></p>
<p>JSHint会跳过检查所有位于/<em> jshint ignore:start </em>/ 和/<em> jshint ignore:end </em>/ 间的代码。<br>也可以在行的尾部添加行注释以跳过当前行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ignoreThis(); // jshint ignore:line</div></pre></td></tr></table></figure></p>
<h1 id="JSHint-选项"><a href="#JSHint-选项" class="headerlink" title="JSHint 选项"></a>JSHint 选项</h1><p>JSHint本身是个命令行工具，它提供了灵活了的选项设置方式。<br>JSHint 有两种选项: <code>enforcing</code> 和<code>relaxing</code><br><code>enforcing</code> 用于使JSHint的检查更加严格，而<code>relaxing</code>用于阻止一些警告。<br><a href="https://github.com/jshint/jshint/blob/master/examples/.jshintrc" target="_blank" rel="external">更多选项在jshintrc文件示例</a><br><a href="http://jshint.com/docs/options/" target="_blank" rel="external">更多选项的含义见官方文档</a></p>
<h1 id="hacker的方式"><a href="#hacker的方式" class="headerlink" title="hacker的方式"></a>hacker的方式</h1><p>上面说的方式官方的文档都有更加详细的说明，可如果你总是想禁用掉特定的警告该怎么办呢?比方说对于以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (err) return next(err);</div></pre></td></tr></table></figure></p>
<p>JSHint会警告<code>Expected &#39;{&#39; and instead saw &#39;return&#39;.</code>，因为我（node社区很多人也是）不喜欢在单行的返回代码前后添加大括号，但是我也不想总是在文件最上面添加注释添加一块专门的注释来禁用它。一种可行的办法是修改编辑器的代码检测插件，不过难度有点高，另一种方法就是修改JSHint 的代码，我们只需要对一个reporter文件稍做修改即可。打开文件<code>jshint/src/reporters/default.js</code>，在<code>var error = result.error;</code>下面加入两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var code = error.code;</div><div class="line">if (code === &apos;W116&apos;) return;</div></pre></td></tr></table></figure></p>
<p>大功告成，保存以后再用JSHint就再也看不到那样的警告了。（当然，如果你的JSHint使用别的reporter那就另当别论了）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSHint是一款在线的js代码验证工具，它能帮助你找出在开发中不经意犯下错误和可能存在的潜在问题。强烈建议尽可能的使用检查工具来确认你的编码风格以及设计模式的正确性。JSHint 提供在线和本地使用(基于 Node.js)。同时，还有很多插件支持VS，Eclipse，Notepad++，Sublime Text等。&lt;br&gt;
    
    </summary>
    
    
      <category term="JSHint" scheme="http://yoursite.com/tags/JSHint/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text3 前端插件安装与使用</title>
    <link href="http://yoursite.com/2016/07/05/sublime-0/"/>
    <id>http://yoursite.com/2016/07/05/sublime-0/</id>
    <published>2016-07-05T04:23:08.000Z</published>
    <updated>2016-08-26T01:02:18.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装package-control"><a href="#安装package-control" class="headerlink" title="安装package control"></a>安装package control</h1><p>安装插件需要先安装package control，有两种安装package control的方法，<a href="https://packagecontrol.io/installation" target="_blank" rel="external">官方安装方法</a><br><a id="more"></a></p>
<ul>
<li>控制台安装<br>在sublime text3<code>ctrl+~</code>呼出控制台或者<code>View &gt; Show Console</code>,然后在控制台粘贴以下Python code：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = &apos;2915d1851351e5ee549c20394736b442&apos; + &apos;8bc59f460fa1548d1514676163dafc88&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>上面的代码根据版本不同会更新，所以每次使用都链接上方的地址获取</p>
</blockquote>
<p>上面的代码会创建安装<code>Installed Packages</code>的文件夹，自动下载<code>Package Control.sublime-package</code>到这个文件夹。</p>
<ul>
<li><p>手动安装</p>
<ol>
<li>进入 Preferences &gt; Browse Packages…</li>
<li>进入 <code>Installed Packages/</code> 目录下</li>
<li>下载 <code>[Package Control.sublime-package](https://packagecontrol.io/Package%20Control.sublime-package)</code>到 <code>Installed  Packages/</code>目录下。</li>
<li>重启 Sublime Text3</li>
</ol>
</li>
</ul>
<h1 id="安装插件的常用方法"><a href="#安装插件的常用方法" class="headerlink" title="安装插件的常用方法"></a>安装插件的常用方法</h1><ul>
<li><code>ctrl+shift+p</code>进入Command Palette，输入<code>install</code>进入 Package Control: Install Package，输入要安装的插件的名称回车安装。</li>
<li>如果在在列表中没有要安装的插件，可以在github上下载插件安装包，然后打开菜单栏里的“Preferences”—&gt;”Browse Packages”，打开包的位置，然后将下载的Zip包“解压”后复制到该文件夹内即可，重启Sublime Text3 插件就会安装成功了。</li>
</ul>
<h1 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h1><p> <a href="http://docs.emmet.io/" target="_blank" rel="external">Emmet官方使用文档</a><br> <a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="external">EMMET中文文档参考 yanxyz@github</a><br> <a href="http://docs.emmet.io/cheat-sheet/" target="_blank" rel="external">速查表</a><br> Emmet使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度。<br> 直接在编辑器中输入HTML或CSS的代码的缩写，然后按tab键就可以拓展为完整的代码片。</p>
<h2 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h2><pre><code>1. 展开缩写
2. 匹配标签
3. 跳转到配对标签
4. 包裹缩写
5. 跳转到编辑点
6. 选择
7. 切换注释
8. 分割合并标签
9. 删除标签
10. 合并行
11. 更新图片尺寸
12. 计算数学表达式
13. 增减数字
14. 重构 CSS 值
15. 编码/解码图像为 data:URL
</code></pre><p>缩写是 Emmet的核心：这些特殊的表达式被实时的解析转化为代码块，缩写的语法类似于 CSS 选择器。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>所有未知的缩写都会转换成标签，例如，<code>foo → &lt;foo&gt;&lt;/foo&gt;</code><br>后代：&gt;<br>兄弟：+<br>上级：^<br>分组：()<br>乘法：*<br>自增符号：$<br>ID：#<br>类属性：.<br>自定义属性：[title=”Hello world”]<br>文本：{}<br>隐式标签：当展开缩写时，Emmet 尝试获取缩写所处位置的父元素上下文，比如 HTML 元素。如果获取成功，Emmet 使用它的名字来解析隐式标签名。</p>
<h2 id="元素类型"><a href="#元素类型" class="headerlink" title="元素类型"></a>元素类型</h2><p>当编辑 HTML/XML 文档时，缩写展开为 HTML/XML 标签。不过一些元素，比如 a 或 img， 缩写展开后带有属性：<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>或<code>&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;</code>。Emmet 所有元素的定义放在 <code>snippets.json</code> 文件里，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;html&quot;: &#123;</div><div class="line">        &quot;abbreviations&quot;: &#123;</div><div class="line">            &quot;a&quot;: &quot;&lt;a href=\&quot;\&quot;&gt;&quot;,</div><div class="line">            &quot;link&quot;: &quot;&lt;link rel=\&quot;stylesheet\&quot; href=\&quot;\&quot; /&gt;&quot;</div><div class="line">            ...</div><div class="line">        &#125;,</div><div class="line">        &quot;snippets&quot;: &#123;</div><div class="line">            &quot;cc:ie6&quot;: &quot;&lt;!--[if lte IE 6]&gt;\n\t$&#123;child&#125;|\n&lt;![endif]--&gt;&quot;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    &quot;css&quot;: &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="css缩写"><a href="#css缩写" class="headerlink" title="css缩写"></a>css缩写</h2><ol>
<li>在属性前或缩写前放一个连字符，Emmet 会自动给这个属性添加厂商前缀。</li>
<li>渐变<br>可以输入函数 lg(…) (或 linear-gradient(…)) 函数，并且像缩写一样展开。如果用做属性值，Emmet 将使用属性名来生成新的属性。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient" target="_blank" rel="external">linear-gradient</a></li>
<li>模糊匹配<br>为了让书写 CSS 更容易， Emmet 实现了模糊查找。每次输入未知的缩写时，Emmet 尝试查找最相近的代码片断。<br>例如，缩写不是 ov:h(overflow: hidden;) ，而是 ov-h, ovh 甚至 oh。</li>
<li><p>值<br>比如我们在写 width：100px的时候，只需要 w100 即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p 表示%</div><div class="line">e 表示 em</div><div class="line">x 表示 ex</div></pre></td></tr></table></figure>
</li>
<li><p>附加属性<br>@f可以生成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@font-face &#123;</div><div class="line">font-family:;</div><div class="line">src:url();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="html-缩写"><a href="#html-缩写" class="headerlink" title="html 缩写"></a>html 缩写</h2><p>所有未知的缩写都会转换成标签，例如，foo → <foo></foo><br>! ：生成后h5文档<br>a ：<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code><br>更多查<a href="http://docs.emmet.io/cheat-sheet/" target="_blank" rel="external">速查表</a></p>
<h1 id="SublimeLinter"><a href="#SublimeLinter" class="headerlink" title="SublimeLinter"></a>SublimeLinter</h1><p>SublimeLinter 是前端编码利器——Sublime Text 的一款插件，用于高亮提示用户编写的代码中存在的不规范和错误的写法，支持 JavaScript、CSS、HTML、Java、PHP、Python、Ruby 等十多种开发语言。如何在 Windows 中配置 SublimeLinter 进行 JS &amp; CSS 校验?</p>
<h2 id="SublimeLinter-jshint"><a href="#SublimeLinter-jshint" class="headerlink" title="SublimeLinter-jshint"></a>SublimeLinter-jshint</h2><p>安装此插件之前需要确保本机安装jshint,在安装nodejs(<em>Winsows上Nodejs的安装配置</em>)下安装jshint（**）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g jshint</div><div class="line">npm install -g csslint</div></pre></td></tr></table></figure></p>
<p><a href="https://packagecontrol.io/packages/SublimeLinter" target="_blank" rel="external">主页</a></p>
<h1 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h1><p>侧边栏加强软件:CTRL+K,CTRL+B<br>可配置打开方式,使html文件直接通过快捷键以浏览器打开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//chrome</div><div class="line">  &#123; &quot;keys&quot;: [&quot;ctrl+1&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,</div><div class="line">          &quot;args&quot;: &#123;</div><div class="line">              &quot;paths&quot;: [],</div><div class="line">              &quot;application&quot;: &quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot;,</div><div class="line">              &quot;extensions&quot;:&quot;.*&quot;</div><div class="line">          &#125;</div><div class="line">   &#125;,</div><div class="line">   //Firefox</div><div class="line">   &#123; &quot;keys&quot;: [&quot;ctrl+2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,</div><div class="line">          &quot;args&quot;: &#123;</div><div class="line">              &quot;paths&quot;: [],</div><div class="line">              &quot;application&quot;: &quot;E:\\firefox\\firefox.exe&quot;,</div><div class="line">              &quot;extensions&quot;:&quot;.*&quot;</div><div class="line">          &#125;</div><div class="line">   &#125;,</div><div class="line">   //opera</div><div class="line">    &#123; &quot;keys&quot;: [&quot;ctrl+3&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,</div><div class="line">          &quot;args&quot;: &#123;</div><div class="line">              &quot;paths&quot;: [],</div><div class="line">              &quot;application&quot;: &quot;C:\\Program Files\\Opera developer\\launcher.exe&quot;,</div><div class="line">              &quot;extensions&quot;:&quot;.*&quot;</div><div class="line">          &#125;</div><div class="line">   &#125;,</div><div class="line">   //ie</div><div class="line">    &#123; &quot;keys&quot;: [&quot;ctrl+4&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,</div><div class="line">          &quot;args&quot;: &#123;</div><div class="line">              &quot;paths&quot;: [],</div><div class="line">              &quot;application&quot;: &quot;C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe&quot;,</div><div class="line">              &quot;extensions&quot;:&quot;.*&quot;</div><div class="line">          &#125;</div><div class="line">   &#125;,</div></pre></td></tr></table></figure></p>
<p><a href="https://packagecontrol.io/packages/SideBarEnhancements" target="_blank" rel="external">更多</a><br><a href="https://github.com/titoBouzout/SideBarEnhancements" target="_blank" rel="external">github主页</a></p>
<h1 id="SideBarFolders"><a href="#SideBarFolders" class="headerlink" title="SideBarFolders"></a>SideBarFolders</h1><p>打开的文件夹都太多了，再用这个来管理文件夹<br><a href="https://packagecontrol.io/packages/SideBarFolders" target="_blank" rel="external">更多</a><br><a href="https://github.com/titoBouzout/SideBarFolders" target="_blank" rel="external">github</a></p>
<h1 id="BracketHighlighter"><a href="#BracketHighlighter" class="headerlink" title="BracketHighlighter"></a>BracketHighlighter</h1><p><a href="https://sublime.wbond.net/packages/BracketHighlighter" target="_blank" rel="external">BracketHighlighter</a>插件以高亮显示配对括号以及当前光标所在区域</p>
<h1 id="JSFormat"><a href="#JSFormat" class="headerlink" title="JSFormat"></a>JSFormat</h1><p>功能：Javascript的代码格式化插件<br>简介：很多网站的JS代码都进行了压缩，一行式的甚至混淆压缩，这让我们看起来很吃力。而这个插件能帮我们把原始代码进行格式的整理，包括换行和缩进等等，是代码一目了然，更快读懂。<br>使用：在已压缩的JS文件中，右键选择jsFormat或者使用默认快捷键（Ctrl+Alt+F）<br><a href="https://packagecontrol.io/packages/JsFormat" target="_blank" rel="external">更多</a><br><a href="https://github.com/jdc0589/JsFormat" target="_blank" rel="external">github</a></p>
<h1 id="TrailingSpaces"><a href="#TrailingSpaces" class="headerlink" title="TrailingSpaces"></a>TrailingSpaces</h1><p>有时候，在代码结尾打多了几个空格或Tab并没有任何显示效果TrailingSpaces这款插件能高亮显示多余的空格和Tab.<br><a href="https://packagecontrol.io/packages/TrailingSpaces" target="_blank" rel="external">更多</a><br><a href="https://github.com/SublimeText/TrailingSpaces" target="_blank" rel="external">github</a></p>
<h1 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h1><p>功能：”=”号对齐<br>简介：变量定义太多，长短不一，可一键对齐<br>使用：默认快捷键Ctrl+Alt+A和QQ截屏冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A；先选择要对齐的文本<br><a href="https://packagecontrol.io/packages/Alignment" target="_blank" rel="external">更多</a></p>
<h1 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h1><p>一款取色器:CTRL+ALT+C.</p>
<h1 id="sublimeREPL"><a href="#sublimeREPL" class="headerlink" title="sublimeREPL"></a>sublimeREPL</h1><p>SublimeREPL 允许你在 Sublime Text 中运行各种语言（NodeJS ， Python，Ruby， Scala 和 Haskell 等）。Sublime Text的Python控制台仅支持单行输入，十分不方便，所以Sublime​REPL以进行一些编码实验（Experiments）。</p>
<h1 id="DocBlocker"><a href="#DocBlocker" class="headerlink" title="DocBlocker"></a>DocBlocker</h1><p>对方法等进行注释,一个真正简单的方式来轻松地创建许多语言包括JavaScript，PHP和CoffeeScript的文档块。只要在函数的上面输入/**，按Tab就可以了。DocBlockr会观察函数需要的变量名和类型，并创建文档块。</p>
<p><a href="https://github.com/spadgos/sublime-jsdocs" target="_blank" rel="external">github</a></p>
<h1 id="CSScomb"><a href="#CSScomb" class="headerlink" title="CSScomb"></a>CSScomb</h1><p>CssComb是为CSS属性进行排序和格式化插件,<a href="http://csscomb.com/" target="_blank" rel="external">官网</a><br>它依赖于Node.js，安装NodeJS后，即可使用CssComb插件，nodejs安装见此（**）<br>使用：菜单<code>Tools-&gt;Run CSScomb</code>或在CSS文件中按快捷键<code>Ctrl+Shift+C</code></p>
<h1 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h1><p>在编程过程中，我们经常需要使用到命令行窗口,Terminal插件可以允许在Sublime Text 3中打开cmd命令窗口,安装好该插件后,即可使用快捷键<code>Ctrl+Shift+T</code>呼出命令行窗口。</p>
<h1 id="MarkDown-Editing"><a href="#MarkDown-Editing" class="headerlink" title="MarkDown Editing"></a>MarkDown Editing</h1><p>支持Markdown语法高亮,支持Github Favored Markdown语法,自带3个主题。</p>
<h1 id="MarkdownPreview"><a href="#MarkdownPreview" class="headerlink" title="MarkdownPreview"></a>MarkdownPreview</h1><p>MarkdownPreview：按<code>CTRL + B</code>生成网页HTML，在最前面添加<code>[TOC]</code>自动生成目录。</p>
<h1 id="Autoprefixer"><a href="#Autoprefixer" class="headerlink" title="Autoprefixer"></a>Autoprefixer</h1><p>这是一款CSS3私有前缀自动补全插件，该插件使用CanIUse资料库，能精准判断哪些属性需要什么前缀，与CssComb插件一样，该插件也需要系统已安装Node.js环境。<br>使用方法：在输入CSS3属性后（冒号前）按Tab键。</p>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>在工作中，版本控制软件最常用的软件之一，而最流行的VCS是Git。你是否厌倦了保存文本文件，并切换回终端运行一些 Git 命令。如果你能从文本编辑器本身执行Git命令，岂不是很好？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装package-control&quot;&gt;&lt;a href=&quot;#安装package-control&quot; class=&quot;headerlink&quot; title=&quot;安装package control&quot;&gt;&lt;/a&gt;安装package control&lt;/h1&gt;&lt;p&gt;安装插件需要先安装package control，有两种安装package control的方法，&lt;a href=&quot;https://packagecontrol.io/installation&quot;&gt;官方安装方法&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="sublime text3" scheme="http://yoursite.com/tags/sublime-text3/"/>
    
  </entry>
  
</feed>
